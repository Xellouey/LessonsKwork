"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∏ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏.
–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∏–∫–µ—Ç–æ–≤, –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.
"""

import logging
from datetime import datetime
from typing import Optional
from telegram import Update
from telegram.ext import ContextTypes
from telegram.constants import ParseMode

from bot.config import settings
from bot.utils.api_client import BackendAPI
from bot.utils.i18n import get_user_text, get_user_language
from bot.utils.state_manager import StateManager
from bot.states.user_states import BotState
from bot.keyboards.main_keyboards import KeyboardBuilder


logger = logging.getLogger(__name__)


class SupportHandlers:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏."""
    
    def __init__(self, state_manager: StateManager):
        self.state_manager = state_manager
        self.api_client = BackendAPI.get_client()
    
    async def support_menu_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """
        –ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –ø–æ–¥–¥–µ—Ä–∂–∫–∏.
        """
        query = update.callback_query
        user_id = update.effective_user.id
        
        if not query or not query.data:
            return
        
        await query.answer()
        
        try:
            user_lang = await get_user_language(user_id)
            
            # –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏
            self.state_manager.set_user_state(user_id, BotState.SUPPORT_CONTACT)
            
            support_text = await get_user_text(user_id, "support.title")
            keyboard = KeyboardBuilder.support_menu(user_lang)
            
            await query.edit_message_text(
                support_text,
                reply_markup=keyboard
            )
            
        except Exception as e:
            logger.error(f"Error in support_menu_callback: {e}")
            await self._send_error_message(query, user_id)
    
    async def send_message_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """
        –ù–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.
        """
        query = update.callback_query
        user_id = update.effective_user.id
        
        if not query or not query.data:
            return
        
        await query.answer()
        
        try:
            # –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
            self.state_manager.set_user_state(user_id, BotState.SUPPORT_MESSAGE_INPUT)
            
            # –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –ø–æ –≤–≤–æ–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è
            message_prompt = await get_user_text(user_id, "support.message_prompt")
            user_lang = await get_user_language(user_id)
            keyboard = KeyboardBuilder.back_to_main(user_lang)
            
            await query.edit_message_text(
                message_prompt,
                reply_markup=keyboard
            )
            
        except Exception as e:
            logger.error(f"Error in send_message_callback: {e}")
            await self._send_error_message(query, user_id)
    
    async def support_message_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """
        –û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.
        """
        user_id = update.effective_user.id
        message = update.message
        
        if not message or not message.text:
            return
        
        try:
            # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏
            current_state, _ = self.state_manager.get_user_state(user_id)
            
            if current_state != BotState.SUPPORT_MESSAGE_INPUT:
                return
            
            user = update.effective_user
            support_message = message.text.strip()
            
            # –°–æ–∑–¥–∞—Ç—å —Ç–∏–∫–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —á–µ—Ä–µ–∑ API
            ticket_data = await self.api_client.create_support_ticket(
                user_id=user_id,
                subject=f"Support request from {user.first_name or 'User'}",
                message=support_message
            )
            
            # –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            user_lang = await get_user_language(user_id)
            confirmation_text = await get_user_text(user_id, "support.message_sent")
            keyboard = KeyboardBuilder.main_menu(user_lang)
            
            await message.reply_text(
                confirmation_text,
                reply_markup=keyboard
            )
            
            # –£–≤–µ–¥–æ–º–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            await self._notify_admin_about_ticket(context, user, support_message, ticket_data)
            
            # –°–±—Ä–æ—Å–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            self.state_manager.set_user_state(user_id, BotState.MAIN_MENU)
            
            logger.info(f"Support ticket created for user {user_id}: {ticket_data.get('id')}")
            
        except Exception as e:
            logger.error(f"Error in support_message_handler: {e}")
            error_text = await get_user_text(user_id, "errors.general")
            await message.reply_text(error_text)
    
    async def _notify_admin_about_ticket(self, context: ContextTypes.DEFAULT_TYPE, user, message: str, ticket_data: dict):
        """
        –£–≤–µ–¥–æ–º–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ –Ω–æ–≤–æ–º —Ç–∏–∫–µ—Ç–µ.
        """
        if not settings.admin_chat_id:
            return
        
        try:
            # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            user_info = f"üë§ User: {user.first_name or 'Unknown'}"
            if user.last_name:
                user_info += f" {user.last_name}"
            if user.username:
                user_info += f" (@{user.username})"
            user_info += f"\nüÜî ID: {user.id}"
            
            # –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            admin_notification = (
                f"üÜò <b>New Support Ticket #{ticket_data.get('id', 'N/A')}</b>\n\n"
                f"{user_info}\n"
                f"üìÖ Time: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n\n"
                f"üí¨ <b>Message:</b>\n{message}"
            )
            
            # –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
            await context.bot.send_message(
                chat_id=settings.admin_chat_id,
                text=admin_notification,
                parse_mode=ParseMode.HTML
            )
            
            # –¢–∞–∫–∂–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –ª–æ–≥–∏ –æ—à–∏–±–æ–∫, –µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ
            if settings.error_log_chat_id and settings.error_log_chat_id != settings.admin_chat_id:
                await context.bot.send_message(
                    chat_id=settings.error_log_chat_id,
                    text=f"üìã Support ticket #{ticket_data.get('id')} created by user {user.id}",
                    parse_mode=ParseMode.HTML
                )
            
        except Exception as e:
            logger.error(f"Error notifying admin about ticket: {e}")
    
    async def faq_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """
        –ü–æ–∫–∞–∑–∞—Ç—å —á–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã.
        """
        query = update.callback_query
        user_id = update.effective_user.id
        
        if not query or not query.data:
            return
        
        await query.answer()
        
        try:
            user_lang = await get_user_language(user_id)
            
            # –°–æ–∑–¥–∞—Ç—å FAQ —Ç–µ–∫—Å—Ç
            faq_text = await self._get_faq_text(user_id, user_lang)
            keyboard = KeyboardBuilder.support_menu(user_lang)
            
            await query.edit_message_text(
                faq_text,
                reply_markup=keyboard,
                parse_mode=ParseMode.HTML
            )
            
        except Exception as e:
            logger.error(f"Error in faq_callback: {e}")
            await self._send_error_message(query, user_id)
    
    async def _get_faq_text(self, user_id: int, lang: str) -> str:
        """
        –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç FAQ.
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            lang: –ö–æ–¥ —è–∑—ã–∫–∞
            
        Returns:
            str: –¢–µ–∫—Å—Ç FAQ
        """
        if lang == 'ru':
            return """
‚ùì <b>–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã</b>

<b>Q: –ö–∞–∫ –∫—É–ø–∏—Ç—å —É—Ä–æ–∫?</b>
A: –í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–∫ –≤ –∫–∞—Ç–∞–ª–æ–≥–µ, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ö—É–ø–∏—Ç—å" –∏ –æ–ø–ª–∞—Ç–∏—Ç–µ —á–µ—Ä–µ–∑ Telegram Stars.

<b>Q: –ì–¥–µ –º–æ–∏ –∫—É–ø–ª–µ–Ω–Ω—ã–µ —É—Ä–æ–∫–∏?</b>
A: –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª "üë§ –ú–æ–∏ —É—Ä–æ–∫–∏" –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é.

<b>Q: –ú–æ–∂–Ω–æ –ª–∏ –ø–æ–ª—É—á–∏—Ç—å –≤–æ–∑–≤—Ä–∞—Ç?</b>
A: –î–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤ –ø–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏.

<b>Q: –ö–∞–∫ —Ä–∞–±–æ—Ç–∞—é—Ç –ø—Ä–æ–º–æ–∫–æ–¥—ã?</b>
A: –í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ —É—Ä–æ–∫–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∫–∏–¥–∫–∏.

<b>Q: –ü—Ä–æ–±–ª–µ–º—ã —Å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ–º?</b>
A: –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ. –ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è, –Ω–∞–ø–∏—à–∏—Ç–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.

<b>Q: –ö–∞–∫ –∏–∑–º–µ–Ω–∏—Ç—å —è–∑—ã–∫?</b>
A: –ù–∞–∂–º–∏—Ç–µ "üåê –Ø–∑—ã–∫" –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é –∏ –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—ã–π —è–∑—ã–∫.
"""
        else:
            return """
‚ùì <b>Frequently Asked Questions</b>

<b>Q: How to buy a lesson?</b>
A: Select a lesson from the catalog, click "Buy" button and pay with Telegram Stars.

<b>Q: Where are my purchased lessons?</b>
A: Go to "üë§ My Lessons" section in the main menu.

<b>Q: Can I get a refund?</b>
A: Yes, contact support within 24 hours after purchase.

<b>Q: How do promo codes work?</b>
A: Enter the promo code when buying a lesson to get a discount.

<b>Q: Playback issues?</b>
A: Check your internet connection. If the problem persists, contact support.

<b>Q: How to change language?</b>
A: Click "üåê Language" in the main menu and select your preferred language.
"""
    
    async def admin_reply_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –Ω–∞ —Ç–∏–∫–µ—Ç.
        –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –æ—Ç–≤–µ—á–∞—é—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏.
        """
        user_id = update.effective_user.id
        message = update.message
        
        # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ —ç—Ç–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
        if not settings.is_admin(user_id):
            return
        
        # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ —ç—Ç–æ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if not message or not message.reply_to_message:
            return
        
        try:
            # –ü–æ–ø—ã—Ç–∞—Ç—å—Å—è –∏–∑–≤–ª–µ—á—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            original_text = message.reply_to_message.text or ""
            
            # –ü–æ–∏—Å–∫ –ø–∞—Ç—Ç–µ—Ä–Ω–∞ "ID: XXXXX" –≤ —Ç–µ–∫—Å—Ç–µ
            import re
            user_id_match = re.search(r'ID: (\d+)', original_text)
            
            if not user_id_match:
                await message.reply_text("‚ùå Cannot find user ID in the original message")
                return
            
            target_user_id = int(user_id_match.group(1))
            admin_reply = message.text
            
            # –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            user_lang = await get_user_language(target_user_id)
            
            if user_lang == 'ru':
                reply_header = "üìû <b>–û—Ç–≤–µ—Ç —Å–ª—É–∂–±—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏:</b>\n\n"
            else:
                reply_header = "üìû <b>Support Team Reply:</b>\n\n"
            
            full_reply = reply_header + admin_reply
            
            await context.bot.send_message(
                chat_id=target_user_id,
                text=full_reply,
                parse_mode=ParseMode.HTML
            )
            
            # –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
            await message.reply_text("‚úÖ Reply sent to user")
            
            logger.info(f"Admin reply sent from {user_id} to user {target_user_id}")
            
        except Exception as e:
            logger.error(f"Error in admin_reply_handler: {e}")
            await message.reply_text(f"‚ùå Error sending reply: {str(e)}")
    
    async def contact_admin_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """
        –ü—Ä—è–º–æ–π –∫–æ–Ω—Ç–∞–∫—Ç —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.
        """
        query = update.callback_query
        user_id = update.effective_user.id
        
        if not query:
            return
        
        await query.answer()
        
        try:
            user_lang = await get_user_language(user_id)
            
            if user_lang == 'ru':
                contact_text = (
                    "üë®‚Äçüíª <b>–°–≤—è–∑—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º</b>\n\n"
                    "–î–ª—è –ø—Ä—è–º–æ–π —Å–≤—è–∑–∏ —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ' –≤—ã—à–µ.\n\n"
                    "–ú—ã —Å—Ç–∞—Ä–∞–µ–º—Å—è –æ—Ç–≤–µ—á–∞—Ç—å –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤."
                )
            else:
                contact_text = (
                    "üë®‚Äçüíª <b>Contact Administrator</b>\n\n"
                    "To contact the administrator directly, use the 'Send Message' button above.\n\n"
                    "We try to respond within 24 hours."
                )
            
            keyboard = KeyboardBuilder.support_menu(user_lang)
            
            await query.edit_message_text(
                contact_text,
                reply_markup=keyboard,
                parse_mode=ParseMode.HTML
            )
            
        except Exception as e:
            logger.error(f"Error in contact_admin_callback: {e}")
            await self._send_error_message(query, user_id)
    
    async def _send_error_message(self, query, user_id: int):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ."""
        try:
            error_text = await get_user_text(user_id, "errors.general")
            keyboard = KeyboardBuilder.back_to_main(await get_user_language(user_id))
            
            await query.edit_message_text(
                error_text,
                reply_markup=keyboard
            )
        except Exception as e:
            logger.error(f"Error sending error message: {e}")


class AdminSupportTools:
    """–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π."""
    
    def __init__(self):
        self.api_client = BackendAPI.get_client()
    
    async def get_open_tickets(self) -> list:
        """
        –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –æ—Ç–∫—Ä—ã—Ç—ã—Ö —Ç–∏–∫–µ—Ç–æ–≤.
        TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –∫–æ–≥–¥–∞ –≤ API –±—É–¥–µ—Ç endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–∏–∫–µ—Ç–æ–≤.
        """
        try:
            # –í –±—É–¥—É—â–µ–º: return await self.api_client.get_support_tickets(status='open')
            return []
        except Exception as e:
            logger.error(f"Error getting open tickets: {e}")
            return []
    
    async def close_ticket(self, ticket_id: int, admin_response: str = None) -> bool:
        """
        –ó–∞–∫—Ä—ã—Ç—å —Ç–∏–∫–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏.
        TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –∫–æ–≥–¥–∞ –≤ API –±—É–¥–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π endpoint.
        """
        try:
            # –í –±—É–¥—É—â–µ–º: 
            # return await self.api_client.update_support_ticket(
            #     ticket_id, status='closed', admin_response=admin_response
            # )
            return True
        except Exception as e:
            logger.error(f"Error closing ticket {ticket_id}: {e}")
            return False


# –§–∞–±—Ä–∏–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –ø–æ–¥–¥–µ—Ä–∂–∫–∏
def create_support_handlers(state_manager: StateManager) -> SupportHandlers:
    """–°–æ–∑–¥–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏."""
    return SupportHandlers(state_manager)


# –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
admin_support_tools = AdminSupportTools()