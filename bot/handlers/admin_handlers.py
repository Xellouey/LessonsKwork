"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ –≤ –±–æ—Ç–µ.
–í–∫–ª—é—á–∞–µ—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—Ä–æ–∫–∞–º–∏, —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É, —Ä–∞—Å—Å—ã–ª–∫–∏ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.
"""

import logging
from datetime import datetime
from typing import Optional, List, Dict, Any

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ParseMode
from telegram.ext import ContextTypes, ConversationHandler
from sqlalchemy.orm import Session
from sqlalchemy import func

from bot.shared.database import get_db
from bot.shared.models import User, Lesson, Course, Purchase, PromoCode, BotSettings
from bot.utils.state_manager import StateManager
from bot.keyboards.admin_keyboards import AdminKeyboards

logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
(
    ADMIN_MENU,
    LESSON_MANAGEMENT,
    ADD_LESSON,
    EDIT_LESSON,
    USER_STATS,
    BROADCAST,
    SETTINGS,
    WAITING_LESSON_TITLE,
    WAITING_LESSON_DESCRIPTION,
    WAITING_LESSON_PRICE,
    WAITING_LESSON_CONTENT,
    WAITING_BROADCAST_MESSAGE,
    WAITING_SETTING_VALUE
) = range(13)


class AdminHandlers:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏."""
    
    def __init__(self, state_manager: StateManager):
        self.state_manager = state_manager
        self.keyboards = AdminKeyboards()
    
    async def is_admin(self, telegram_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."""
        db = next(get_db())
        try:
            user = db.query(User).filter(User.telegram_id == telegram_id).first()
            return user and user.is_admin
        finally:
            db.close()
    
    async def admin_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–ì–ª–∞–≤–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –≤—Ö–æ–¥–∞ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å."""
        user = update.effective_user
        
        if not await self.is_admin(user.id):
            await update.message.reply_text(
                "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏."
            )
            return ConversationHandler.END
        
        await self.show_admin_menu(update, context)
        return ADMIN_MENU
    
    async def show_admin_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏."""
        db = next(get_db())
        try:
            # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            stats = self.get_dashboard_stats(db)
            
            menu_text = (
                f"üéõÔ∏è **–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å**\n\n"
                f"üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n"
                f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['total_users']}\n"
                f"üìö –£—Ä–æ–∫–æ–≤: {stats['total_lessons']}\n"
                f"üí∞ –î–æ—Ö–æ–¥: ‚≠ê {stats['total_revenue']}\n"
                f"üõí –ü–æ–∫—É–ø–æ–∫: {stats['total_purchases']}\n\n"
                f"üïê –û–±–Ω–æ–≤–ª–µ–Ω–æ: {datetime.now().strftime('%H:%M:%S')}"
            )
            
            keyboard = self.keyboards.get_admin_main_menu()
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            if update.callback_query:
                await update.callback_query.edit_message_text(
                    menu_text,
                    parse_mode=ParseMode.MARKDOWN,
                    reply_markup=reply_markup
                )
            else:
                await update.message.reply_text(
                    menu_text,
                    parse_mode=ParseMode.MARKDOWN,
                    reply_markup=reply_markup
                )
        finally:
            db.close()
    
    def get_dashboard_stats(self, db: Session) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –¥–∞—à–±–æ—Ä–¥–∞."""
        total_users = db.query(User).count()
        total_lessons = db.query(Lesson).filter(Lesson.is_active == True).count()
        total_purchases = db.query(Purchase).filter(Purchase.status == "completed").count()
        total_revenue = db.query(func.sum(Purchase.amount)).filter(
            Purchase.status == "completed"
        ).scalar() or 0
        
        return {
            "total_users": total_users,
            "total_lessons": total_lessons,
            "total_purchases": total_purchases,
            "total_revenue": total_revenue
        }
    
    async def admin_menu_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é."""
        query = update.callback_query
        await query.answer()
        
        user = update.effective_user
        if not await self.is_admin(user.id):
            await query.edit_message_text("‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞.")
            return ConversationHandler.END
        
        action = query.data.split(":")[1] if ":" in query.data else None
        
        if action == "lessons":
            return await self.show_lesson_management(update, context)
        elif action == "users":
            return await self.show_user_stats(update, context)
        elif action == "broadcast":
            return await self.broadcast_callback(update, context)
        elif action == "settings":
            return await self.show_settings_menu(update, context)
        elif action == "refresh":
            await self.show_admin_menu(update, context)
            return ADMIN_MENU
        elif action == "back":
            await self.show_admin_menu(update, context)
            return ADMIN_MENU
        
        return ADMIN_MENU
    
    async def show_lesson_management(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É—Ä–æ–∫–∞–º–∏."""
        db = next(get_db())
        try:
            lessons = db.query(Lesson).filter(Lesson.is_active == True).all()
            
            text = f"üìö **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—Ä–æ–∫–∞–º–∏** ({len(lessons)} —É—Ä–æ–∫–æ–≤)\n\n"
            
            if lessons:
                for lesson in lessons[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
                    text += f"‚Ä¢ {lesson.title} - ‚≠ê{lesson.price}\n"
                if len(lessons) > 10:
                    text += f"\n... –∏ –µ—â–µ {len(lessons) - 10} —É—Ä–æ–∫–æ–≤"
            else:
                text += "–£—Ä–æ–∫–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç."
            
            keyboard = self.keyboards.get_lesson_management_menu()
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.callback_query.edit_message_text(
                text,
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=reply_markup
            )
            
            return LESSON_MANAGEMENT
        finally:
            db.close()
    
    async def show_user_stats(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."""
        db = next(get_db())
        try:
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            total_users = db.query(User).count()
            active_users = db.query(User).filter(User.is_active == True).count()
            admin_users = db.query(User).filter(User.is_admin == True).count()
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–∫—É–ø–æ–∫
            purchases_today = db.query(Purchase).filter(
                func.date(Purchase.created_at) == datetime.now().date(),
                Purchase.status == "completed"
            ).count()
            
            # –¢–æ–ø –ø–æ–∫—É–ø–∞—Ç–µ–ª–∏
            top_buyers = db.query(
                User.first_name,
                User.username,
                func.count(Purchase.id).label('purchase_count'),
                func.sum(Purchase.amount).label('total_spent')
            ).join(Purchase).filter(
                Purchase.status == "completed"
            ).group_by(User.id).order_by(
                func.sum(Purchase.amount).desc()
            ).limit(5).all()
            
            text = (
                f"üë• **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π**\n\n"
                f"üìä **–û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:**\n"
                f"‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
                f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {active_users}\n"
                f"‚Ä¢ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: {admin_users}\n"
                f"‚Ä¢ –ü–æ–∫—É–ø–æ–∫ —Å–µ–≥–æ–¥–Ω—è: {purchases_today}\n\n"
            )
            
            if top_buyers:
                text += "üèÜ **–¢–æ–ø –ø–æ–∫—É–ø–∞—Ç–µ–ª–∏:**\n"
                for i, buyer in enumerate(top_buyers, 1):
                    name = buyer.first_name
                    if buyer.username:
                        name += f" (@{buyer.username})"
                    text += f"{i}. {name} - ‚≠ê{buyer.total_spent} ({buyer.purchase_count} –ø–æ–∫—É–ø–æ–∫)\n"
            
            keyboard = self.keyboards.get_back_to_admin_menu()
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.callback_query.edit_message_text(
                text,
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=reply_markup
            )
            
            return USER_STATS
        finally:
            db.close()
    
    async def show_settings_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫."""
        db = next(get_db())
        try:
            settings = db.query(BotSettings).filter(BotSettings.is_active == True).all()
            
            text = "‚öôÔ∏è **–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞**\n\n"
            
            if settings:
                text += "üìù **–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:**\n"
                for setting in settings[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
                    text += f"‚Ä¢ {setting.key}: {setting.value[:50]}{'...' if len(setting.value) > 50 else ''}\n"
            else:
                text += "–ù–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–∫–∞ –Ω–µ—Ç."
            
            keyboard = self.keyboards.get_settings_menu()
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.callback_query.edit_message_text(
                text,
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=reply_markup
            )
            
            return SETTINGS
        finally:
            db.close()
    
    async def cancel(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–û—Ç–º–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏ –∏ –≤–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
        context.user_data.clear()
        
        if update.callback_query:
            await self.show_admin_menu(update, context)
        else:
            await update.message.reply_text(
                "‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.",
                reply_markup=InlineKeyboardMarkup(self.keyboards.get_back_to_admin_menu())
            )
        
        return ADMIN_MENU


def create_admin_handlers(state_manager: StateManager) -> AdminHandlers:
    """–°–æ–∑–¥–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏."""
    return AdminHandlers(state_manager)   
 # === –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –£–ü–†–ê–í–õ–ï–ù–ò–Ø –£–†–û–ö–ê–ú–ò ===
    
    async def lesson_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π —Å —É—Ä–æ–∫–∞–º–∏."""
        query = update.callback_query
        await query.answer()
        
        user = update.effective_user
        if not await self.is_admin(user.id):
            await query.edit_message_text("‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞.")
            return ConversationHandler.END
        
        action_parts = query.data.split(":")
        action = action_parts[1] if len(action_parts) > 1 else None
        
        if action == "add":
            return await self.start_add_lesson(update, context)
        elif action == "edit":
            return await self.show_lesson_list_for_edit(update, context)
        elif action == "list":
            return await self.show_lesson_list(update, context)
        elif action == "delete":
            return await self.show_lesson_list_for_delete(update, context)
        elif action == "page":
            page = int(action_parts[2]) if len(action_parts) > 2 else 0
            return await self.show_lesson_list(update, context, page)
        
        return LESSON_MANAGEMENT
    
    async def start_add_lesson(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–ù–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É—Ä–æ–∫–∞."""
        text = (
            "‚ûï **–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —É—Ä–æ–∫–∞**\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —É—Ä–æ–∫–∞:"
        )
        
        keyboard = self.keyboards.get_back_to_admin_menu()
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.callback_query.edit_message_text(
            text,
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=reply_markup
        )
        
        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ —É—Ä–æ–∫–∞
        context.user_data.clear()
        
        return WAITING_LESSON_TITLE
    
    async def waiting_lesson_title(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–û–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è —É—Ä–æ–∫–∞."""
        title = update.message.text.strip()
        
        if len(title) < 3:
            await update.message.reply_text(
                "‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ —É—Ä–æ–∫–∞ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
            )
            return WAITING_LESSON_TITLE
        
        if len(title) > 255:
            await update.message.reply_text(
                "‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ —É—Ä–æ–∫–∞ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–º–∞–∫—Å–∏–º—É–º 255 —Å–∏–º–≤–æ–ª–æ–≤). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
            )
            return WAITING_LESSON_TITLE
        
        context.user_data['lesson_title'] = title
        
        await update.message.reply_text(
            f"‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ: {title}\n\n"
            "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —É—Ä–æ–∫–∞:"
        )
        
        return WAITING_LESSON_DESCRIPTION
    
    async def waiting_lesson_description(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–û–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ –æ–ø–∏—Å–∞–Ω–∏—è —É—Ä–æ–∫–∞."""
        description = update.message.text.strip()
        
        if len(description) < 10:
            await update.message.reply_text(
                "‚ùå –û–ø–∏—Å–∞–Ω–∏–µ —É—Ä–æ–∫–∞ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
            )
            return WAITING_LESSON_DESCRIPTION
        
        context.user_data['lesson_description'] = description
        
        await update.message.reply_text(
            f"‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ\n\n"
            "–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É —É—Ä–æ–∫–∞ –≤ Telegram Stars (–∏–ª–∏ 0 –¥–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ —É—Ä–æ–∫–∞):"
        )
        
        return WAITING_LESSON_PRICE
    
    async def waiting_lesson_price(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–û–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ —Ü–µ–Ω—ã —É—Ä–æ–∫–∞."""
        try:
            price = int(update.message.text.strip())
            
            if price < 0:
                await update.message.reply_text(
                    "‚ùå –¶–µ–Ω–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–Ω—É:"
                )
                return WAITING_LESSON_PRICE
            
            if price > 2500:  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –≤ Telegram Stars
                await update.message.reply_text(
                    "‚ùå –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ 2500 Telegram Stars. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–Ω—É:"
                )
                return WAITING_LESSON_PRICE
            
            context.user_data['lesson_price'] = price
            context.user_data['lesson_is_free'] = price == 0
            
            await update.message.reply_text(
                f"‚úÖ –¶–µ–Ω–∞: {'–ë–µ—Å–ø–ª–∞—Ç–Ω–æ' if price == 0 else f'‚≠ê{price}'}\n\n"
                "–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–Ω—Ç–µ–Ω—Ç —É—Ä–æ–∫–∞:\n"
                "‚Ä¢ –í–∏–¥–µ–æ —Ñ–∞–π–ª (–¥–ª—è –≤–∏–¥–µ–æ —É—Ä–æ–∫–∞)\n"
                "‚Ä¢ –¢–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —É—Ä–æ–∫–∞)\n"
                "‚Ä¢ –ò–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å' —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç –ø–æ–∑–∂–µ"
            )
            
            return WAITING_LESSON_CONTENT
            
        except ValueError:
            await update.message.reply_text(
                "‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
            )
            return WAITING_LESSON_PRICE
    
    async def waiting_lesson_content(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —É—Ä–æ–∫–∞."""
        if update.message.text and update.message.text.lower() == '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å':
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç
            context.user_data['lesson_content'] = None
            context.user_data['lesson_video_path'] = None
        elif update.message.video:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–µ–æ
            video = update.message.video
            context.user_data['lesson_video_path'] = video.file_id
            context.user_data['lesson_content'] = f"–í–∏–¥–µ–æ: {video.file_name or 'video.mp4'}"
        elif update.message.text:
            # –¢–µ–∫—Å—Ç–æ–≤—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
            content = update.message.text.strip()
            if len(content) < 10:
                await update.message.reply_text(
                    "‚ùå –¢–µ–∫—Å—Ç–æ–≤—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
                )
                return WAITING_LESSON_CONTENT
            
            context.user_data['lesson_content'] = content
            context.user_data['lesson_video_path'] = None
        else:
            await update.message.reply_text(
                "‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ, —Ç–µ–∫—Å—Ç –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å':"
            )
            return WAITING_LESSON_CONTENT
        
        return await self.save_lesson(update, context)
    
    async def save_lesson(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —É—Ä–æ–∫–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö."""
        db = next(get_db())
        try:
            lesson_data = context.user_data
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —É—Ä–æ–∫
            lesson = Lesson(
                title=lesson_data['lesson_title'],
                description=lesson_data['lesson_description'],
                price=lesson_data['lesson_price'],
                is_free=lesson_data['lesson_is_free'],
                text_content=lesson_data.get('lesson_content'),
                video_path=lesson_data.get('lesson_video_path'),
                is_active=True
            )
            
            db.add(lesson)
            db.commit()
            db.refresh(lesson)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
            content_info = "–ë–µ–∑ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"
            if lesson.video_path:
                content_info = "–í–∏–¥–µ–æ"
            elif lesson.text_content:
                content_info = "–¢–µ–∫—Å—Ç"
            
            success_text = (
                f"‚úÖ **–£—Ä–æ–∫ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!**\n\n"
                f"üìö **–ù–∞–∑–≤–∞–Ω–∏–µ:** {lesson.title}\n"
                f"üìÑ **–û–ø–∏—Å–∞–Ω–∏–µ:** {lesson.description[:100]}{'...' if len(lesson.description) > 100 else ''}\n"
                f"üí∞ **–¶–µ–Ω–∞:** {'–ë–µ—Å–ø–ª–∞—Ç–Ω–æ' if lesson.is_free else f'‚≠ê{lesson.price}'}\n"
                f"üìπ **–ö–æ–Ω—Ç–µ–Ω—Ç:** {content_info}\n"
                f"üÜî **ID:** {lesson.id}"
            )
            
            keyboard = self.keyboards.get_lesson_management_menu()
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(
                success_text,
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=reply_markup
            )
            
            # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            context.user_data.clear()
            
            return LESSON_MANAGEMENT
            
        except Exception as e:
            db.rollback()
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —É—Ä–æ–∫–∞: {e}")
            
            await update.message.reply_text(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —É—Ä–æ–∫–∞: {str(e)}\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É."
            )
            
            return LESSON_MANAGEMENT
        finally:
            db.close()
    
    async def show_lesson_list(self, update: Update, context: ContextTypes.DEFAULT_TYPE, page: int = 0) -> int:
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —É—Ä–æ–∫–æ–≤ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π."""
        db = next(get_db())
        try:
            # –ü–æ–ª—É—á–∞–µ–º —É—Ä–æ–∫–∏ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
            lessons_per_page = 5
            offset = page * lessons_per_page
            
            lessons = db.query(Lesson).filter(
                Lesson.is_active == True
            ).offset(offset).limit(lessons_per_page + 1).all()  # +1 –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ª–∏—á–∏—è —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            
            has_next = len(lessons) > lessons_per_page
            if has_next:
                lessons = lessons[:-1]  # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç
            
            total_lessons = db.query(Lesson).filter(Lesson.is_active == True).count()
            
            if not lessons:
                text = "üìö **–°–ø–∏—Å–æ–∫ —É—Ä–æ–∫–æ–≤**\n\n–£—Ä–æ–∫–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç."
            else:
                text = f"üìö **–°–ø–∏—Å–æ–∫ —É—Ä–æ–∫–æ–≤** (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1})\n\n"
                
                for i, lesson in enumerate(lessons, 1):
                    status = "üü¢" if lesson.is_active else "üî¥"
                    price = "üÜì" if lesson.is_free else f"‚≠ê{lesson.price}"
                    text += f"{status} **{lesson.title}**\n"
                    text += f"   üí∞ {price} | üÜî {lesson.id}\n"
                    text += f"   üìÑ {lesson.description[:50]}{'...' if len(lesson.description) > 50 else ''}\n\n"
                
                text += f"–í—Å–µ–≥–æ —É—Ä–æ–∫–æ–≤: {total_lessons}"
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π
            keyboard = []
            
            # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
            nav_row = []
            if page > 0:
                nav_row.append(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"lesson:page:{page-1}"))
            if has_next:
                nav_row.append(InlineKeyboardButton("‚û°Ô∏è –î–∞–ª–µ–µ", callback_data=f"lesson:page:{page+1}"))
            
            if nav_row:
                keyboard.append(nav_row)
            
            # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞
            keyboard.append([
                InlineKeyboardButton("üîô –ö —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é", callback_data="admin:lessons")
            ])
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.callback_query.edit_message_text(
                text,
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=reply_markup
            )
            
            return LESSON_MANAGEMENT
            
        finally:
            db.close()
    
    async def show_lesson_list_for_edit(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —É—Ä–æ–∫–æ–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
        db = next(get_db())
        try:
            lessons = db.query(Lesson).filter(Lesson.is_active == True).limit(10).all()
            
            if not lessons:
                text = "üìù **–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Ä–æ–∫–æ–≤**\n\n–£—Ä–æ–∫–æ–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ—Ç."
                keyboard = self.keyboards.get_back_to_admin_menu()
            else:
                text = "üìù **–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–∫ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:**\n\n"
                
                keyboard = []
                for lesson in lessons:
                    price = "üÜì" if lesson.is_free else f"‚≠ê{lesson.price}"
                    keyboard.append([
                        InlineKeyboardButton(
                            f"{lesson.title} ({price})",
                            callback_data=f"lesson:edit_select:{lesson.id}"
                        )
                    ])
                
                keyboard.append([
                    InlineKeyboardButton("üîô –ö —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é", callback_data="admin:lessons")
                ])
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.callback_query.edit_message_text(
                text,
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=reply_markup
            )
            
            return EDIT_LESSON
            
        finally:
            db.close()
    
    async def show_lesson_list_for_delete(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —É—Ä–æ–∫–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è."""
        db = next(get_db())
        try:
            lessons = db.query(Lesson).filter(Lesson.is_active == True).limit(10).all()
            
            if not lessons:
                text = "üóëÔ∏è **–£–¥–∞–ª–µ–Ω–∏–µ —É—Ä–æ–∫–æ–≤**\n\n–£—Ä–æ–∫–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –Ω–µ—Ç."
                keyboard = self.keyboards.get_back_to_admin_menu()
            else:
                text = "üóëÔ∏è **–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:**\n\n‚ö†Ô∏è **–í–Ω–∏–º–∞–Ω–∏–µ!** –£–¥–∞–ª–µ–Ω–∏–µ —É—Ä–æ–∫–∞ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ.\n\n"
                
                keyboard = []
                for lesson in lessons:
                    price = "üÜì" if lesson.is_free else f"‚≠ê{lesson.price}"
                    keyboard.append([
                        InlineKeyboardButton(
                            f"üóëÔ∏è {lesson.title} ({price})",
                            callback_data=f"lesson:confirm_delete:{lesson.id}"
                        )
                    ])
                
                keyboard.append([
                    InlineKeyboardButton("üîô –ö —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é", callback_data="admin:lessons")
                ])
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.callback_query.edit_message_text(
                text,
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=reply_markup
            )
            
            return LESSON_MANAGEMENT
            
        finally:
            db.close()  
  # === –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –†–ê–°–°–´–õ–ö–ò ===
    
    async def broadcast_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π."""
        query = update.callback_query
        await query.answer()
        
        user = update.effective_user
        if not await self.is_admin(user.id):
            await query.edit_message_text("‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞.")
            return ConversationHandler.END
        
        text = (
            "üì¢ **–†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π**\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ —Ä–∞–∑–æ—Å–ª–∞—Ç—å –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.\n"
            "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Markdown.\n\n"
            "‚ö†Ô∏è –ë—É–¥—å—Ç–µ –æ—Å—Ç–æ—Ä–æ–∂–Ω—ã - —Å–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º!"
        )
        
        keyboard = self.keyboards.get_back_to_admin_menu()
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            text,
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=reply_markup
        )
        
        return WAITING_BROADCAST_MESSAGE
    
    async def waiting_broadcast_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–û–∂–∏–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏."""
        message_text = update.message.text.strip()
        
        if len(message_text) < 5:
            await update.message.reply_text(
                "‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ (–º–∏–Ω–∏–º—É–º 5 —Å–∏–º–≤–æ–ª–æ–≤). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
            )
            return WAITING_BROADCAST_MESSAGE
        
        if len(message_text) > 4000:
            await update.message.reply_text(
                "‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–º–∞–∫—Å–∏–º—É–º 4000 —Å–∏–º–≤–æ–ª–æ–≤). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
            )
            return WAITING_BROADCAST_MESSAGE
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        context.user_data['broadcast_message'] = message_text
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–≤—å—é –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        db = next(get_db())
        try:
            total_users = db.query(User).filter(User.is_active == True).count()
            
            preview_text = (
                f"üì¢ **–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä —Ä–∞—Å—Å—ã–ª–∫–∏**\n\n"
                f"üë• **–ü–æ–ª—É—á–∞—Ç–µ–ª–µ–π:** {total_users} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n\n"
                f"üìù **–°–æ–æ–±—â–µ–Ω–∏–µ:**\n"
                f"‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
                f"{message_text}\n"
                f"‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n\n"
                f"–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É?"
            )
            
            keyboard = [
                [
                    InlineKeyboardButton("‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å", callback_data="broadcast:send_confirmed"),
                    InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin:broadcast")
                ]
            ]
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(
                preview_text,
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=reply_markup
            )
            
            return BROADCAST
            
        finally:
            db.close()
    
    async def send_broadcast_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º."""
        query = update.callback_query
        await query.answer()
        
        message_text = context.user_data.get('broadcast_message')
        if not message_text:
            await query.edit_message_text(
                "‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.",
                reply_markup=InlineKeyboardMarkup(self.keyboards.get_back_to_admin_menu())
            )
            return ADMIN_MENU
        
        db = next(get_db())
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            users = db.query(User).filter(User.is_active == True).all()
            
            await query.edit_message_text(
                f"üì§ –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É –¥–ª—è {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...",
                parse_mode=ParseMode.MARKDOWN
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
            sent_count = 0
            failed_count = 0
            
            for user in users:
                try:
                    await context.bot.send_message(
                        chat_id=user.telegram_id,
                        text=f"üì¢ **–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏:**\n\n{message_text}",
                        parse_mode=ParseMode.MARKDOWN
                    )
                    sent_count += 1
                    
                    # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ —á—Ç–æ–±—ã –Ω–µ –ø—Ä–µ–≤—ã—Å–∏—Ç—å –ª–∏–º–∏—Ç—ã
                    import asyncio
                    await asyncio.sleep(0.1)
                    
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.telegram_id}: {e}")
                    failed_count += 1
            
            # –†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞—Å—Å—ã–ª–∫–∏
            result_text = (
                f"‚úÖ **–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!**\n\n"
                f"üì§ **–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:** {sent_count}\n"
                f"‚ùå **–û—à–∏–±–æ–∫:** {failed_count}\n"
                f"üë• **–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:** {len(users)}"
            )
            
            keyboard = self.keyboards.get_back_to_admin_menu()
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(
                result_text,
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=reply_markup
            )
            
            # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            context.user_data.clear()
            
            return ADMIN_MENU
            
        finally:
            db.close()
    
    # === –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ù–ê–°–¢–†–û–ï–ö ===
    
    async def settings_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –±–æ—Ç–∞."""
        query = update.callback_query
        await query.answer()
        
        action_parts = query.data.split(":")
        action = action_parts[1] if len(action_parts) > 1 else None
        
        if action == "messages":
            return await self.show_message_settings(update, context)
        elif action == "buttons":
            return await self.show_button_settings(update, context)
        elif action == "add":
            return await self.start_add_setting(update, context)
        elif action == "list":
            return await self.show_all_settings(update, context)
        
        return SETTINGS
    
    async def show_message_settings(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π."""
        db = next(get_db())
        try:
            settings = db.query(BotSettings).filter(
                BotSettings.category == "messages",
                BotSettings.is_active == True
            ).all()
            
            text = "üìù **–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π**\n\n"
            
            if settings:
                for setting in settings:
                    text += f"‚Ä¢ **{setting.key}**\n"
                    text += f"  {setting.value[:100]}{'...' if len(setting.value) > 100 else ''}\n\n"
            else:
                text += "–ù–∞—Å—Ç—Ä–æ–µ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–∫–∞ –Ω–µ—Ç."
            
            keyboard = [
                [
                    InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å", callback_data="settings:add:messages"),
                    InlineKeyboardButton("üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data="settings:edit:messages")
                ],
                [
                    InlineKeyboardButton("üîô –ö –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º", callback_data="admin:settings")
                ]
            ]
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.callback_query.edit_message_text(
                text,
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=reply_markup
            )
            
            return SETTINGS
            
        finally:
            db.close()
    
    async def show_button_settings(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–Ω–æ–ø–æ–∫."""
        db = next(get_db())
        try:
            settings = db.query(BotSettings).filter(
                BotSettings.category == "buttons",
                BotSettings.is_active == True
            ).all()
            
            text = "üîò **–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–Ω–æ–ø–æ–∫**\n\n"
            
            if settings:
                for setting in settings:
                    text += f"‚Ä¢ **{setting.key}:** {setting.value}\n"
            else:
                text += "–ù–∞—Å—Ç—Ä–æ–µ–∫ –∫–Ω–æ–ø–æ–∫ –ø–æ–∫–∞ –Ω–µ—Ç."
            
            keyboard = [
                [
                    InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å", callback_data="settings:add:buttons"),
                    InlineKeyboardButton("üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data="settings:edit:buttons")
                ],
                [
                    InlineKeyboardButton("üîô –ö –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º", callback_data="admin:settings")
                ]
            ]
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.callback_query.edit_message_text(
                text,
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=reply_markup
            )
            
            return SETTINGS
            
        finally:
            db.close()
    
    async def start_add_setting(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–ù–∞—á–∞—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏."""
        text = (
            "‚öôÔ∏è **–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏**\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: welcome_message, button_catalog):"
        )
        
        keyboard = self.keyboards.get_back_to_admin_menu()
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.callback_query.edit_message_text(
            text,
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=reply_markup
        )
        
        context.user_data.clear()
        
        return WAITING_SETTING_VALUE
    
    async def waiting_setting_value(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–û–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏."""
        if 'setting_key' not in context.user_data:
            # –ü–µ—Ä–≤—ã–π —à–∞–≥ - –≤–≤–æ–¥ –∫–ª—é—á–∞
            key = update.message.text.strip()
            
            if len(key) < 3:
                await update.message.reply_text(
                    "‚ùå –ö–ª—é—á –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
                )
                return WAITING_SETTING_VALUE
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –∫–ª—é—á–∞
            db = next(get_db())
            try:
                existing = db.query(BotSettings).filter(BotSettings.key == key).first()
                if existing:
                    await update.message.reply_text(
                        f"‚ùå –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å –∫–ª—é—á–æ–º '{key}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–π –∫–ª—é—á:"
                    )
                    return WAITING_SETTING_VALUE
            finally:
                db.close()
            
            context.user_data['setting_key'] = key
            
            await update.message.reply_text(
                f"‚úÖ –ö–ª—é—á: {key}\n\n"
                "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:"
            )
            
            return WAITING_SETTING_VALUE
        else:
            # –í—Ç–æ—Ä–æ–π —à–∞–≥ - –≤–≤–æ–¥ –∑–Ω–∞—á–µ–Ω–∏—è
            value = update.message.text.strip()
            
            if len(value) < 1:
                await update.message.reply_text(
                    "‚ùå –ó–Ω–∞—á–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
                )
                return WAITING_SETTING_VALUE
            
            return await self.save_setting(update, context, value)
    
    async def save_setting(self, update: Update, context: ContextTypes.DEFAULT_TYPE, value: str) -> int:
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö."""
        db = next(get_db())
        try:
            key = context.user_data['setting_key']
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø–æ –∫–ª—é—á—É
            category = "general"
            if "button" in key.lower():
                category = "buttons"
            elif "message" in key.lower() or "text" in key.lower():
                category = "messages"
            elif "notification" in key.lower():
                category = "notifications"
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É
            setting = BotSettings(
                key=key,
                value=value,
                category=category,
                description=f"–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å",
                is_active=True
            )
            
            db.add(setting)
            db.commit()
            db.refresh(setting)
            
            success_text = (
                f"‚úÖ **–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!**\n\n"
                f"üîë **–ö–ª—é—á:** {setting.key}\n"
                f"üìù **–ó–Ω–∞—á–µ–Ω–∏–µ:** {setting.value}\n"
                f"üìÇ **–ö–∞—Ç–µ–≥–æ—Ä–∏—è:** {setting.category}\n"
                f"üÜî **ID:** {setting.id}"
            )
            
            keyboard = self.keyboards.get_settings_menu()
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(
                success_text,
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=reply_markup
            )
            
            # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            context.user_data.clear()
            
            return SETTINGS
            
        except Exception as e:
            db.rollback()
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: {e}")
            
            await update.message.reply_text(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: {str(e)}"
            )
            
            return SETTINGS
        finally:
            db.close()
    
    async def show_all_settings(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏."""
        db = next(get_db())
        try:
            settings = db.query(BotSettings).filter(BotSettings.is_active == True).all()
            
            text = "üìã **–í—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞**\n\n"
            
            if settings:
                # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
                categories = {}
                for setting in settings:
                    if setting.category not in categories:
                        categories[setting.category] = []
                    categories[setting.category].append(setting)
                
                for category, cat_settings in categories.items():
                    category_names = {
                        'general': 'üîß –û–±—â–∏–µ',
                        'messages': 'üìù –°–æ–æ–±—â–µ–Ω–∏—è',
                        'buttons': 'üîò –ö–Ω–æ–ø–∫–∏',
                        'notifications': 'üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è'
                    }
                    
                    text += f"**{category_names.get(category, category.title())}:**\n"
                    
                    for setting in cat_settings:
                        text += f"‚Ä¢ {setting.key}: {setting.value[:30]}{'...' if len(setting.value) > 30 else ''}\n"
                    
                    text += "\n"
            else:
                text += "–ù–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–∫–∞ –Ω–µ—Ç."
            
            keyboard = [
                [
                    InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É", callback_data="settings:add")
                ],
                [
                    InlineKeyboardButton("üîô –ö –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º", callback_data="admin:settings")
                ]
            ]
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.callback_query.edit_message_text(
                text,
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=reply_markup
            )
            
            return SETTINGS
            
        finally:
            db.close()