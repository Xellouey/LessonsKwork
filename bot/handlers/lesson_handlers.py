"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —É—Ä–æ–∫–∞–º–∏.
–ü—Ä–æ—Å–º–æ—Ç—Ä, –¥–æ—Å—Ç–∞–≤–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞, –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞.
"""

import logging
import os
from typing import Optional, Dict, Any
from telegram import Update, InputFile
from telegram.ext import ContextTypes
from telegram.constants import ParseMode

from bot.config import settings
from bot.utils.api_client import BackendAPI
from bot.utils.i18n import get_user_text, get_user_language
from bot.utils.state_manager import StateManager
from bot.states.user_states import BotState
from bot.keyboards.main_keyboards import KeyboardBuilder


logger = logging.getLogger(__name__)


class LessonHandlers:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —É—Ä–æ–∫–∞–º–∏."""
    
    def __init__(self, state_manager: StateManager):
        self.state_manager = state_manager
        self.api_client = BackendAPI.get_client()
    
    async def lesson_detail_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """
        –ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ —É—Ä–æ–∫–∞.
        """
        query = update.callback_query
        user_id = update.effective_user.id
        
        if not query or not query.data:
            return
        
        await query.answer()
        
        try:
            # –ü–∞—Ä—Å–∏–Ω–≥ –∫–æ–ª–ª–±—ç–∫–∞: "lesson:view:lesson_id"
            action_parts = query.data.split(':')
            if len(action_parts) != 3:
                return
            
            lesson_id = int(action_parts[2])
            user_lang = await get_user_language(user_id)
            
            # –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —É—Ä–æ–∫–∞
            lesson = await self.api_client.get_lesson_public(lesson_id)
            
            # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –∫—É–ø–∏–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Ä–æ–∫
            user_purchased = await self.api_client.check_user_has_lesson(user_id, lesson_id)
            
            # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å ID —É—Ä–æ–∫–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
            self.state_manager.set_user_state(
                user_id, 
                BotState.VIEW_LESSON,
                {'lesson_id': lesson_id}
            )
            
            # –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç —Å –¥–µ—Ç–∞–ª—è–º–∏ —É—Ä–æ–∫–∞
            lesson_text = await self._format_lesson_details(lesson, user_id, user_purchased)
            
            # –°–æ–∑–¥–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            keyboard = KeyboardBuilder.lesson_detail(lesson, user_purchased, user_lang)
            
            await query.edit_message_text(
                lesson_text,
                reply_markup=keyboard,
                parse_mode=ParseMode.HTML
            )
            
        except Exception as e:
            logger.error(f"Error in lesson_detail_callback: {e}")
            await self._send_error_message(query, user_id)
    
    async def open_lesson_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """
        –û—Ç–∫—Ä—ã—Ç—å —É—Ä–æ–∫ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞.
        """
        query = update.callback_query
        user_id = update.effective_user.id
        
        if not query or not query.data:
            return
        
        await query.answer()
        
        try:
            # –ü–∞—Ä—Å–∏–Ω–≥ –∫–æ–ª–ª–±—ç–∫–∞: "lesson:open:lesson_id"
            action_parts = query.data.split(':')
            if len(action_parts) != 3:
                return
            
            lesson_id = int(action_parts[2])
            
            # –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —É—Ä–æ–∫–∞
            lesson = await self.api_client.get_lesson_public(lesson_id)
            
            # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ —É—Ä–æ–∫—É
            has_access = await self._check_lesson_access(user_id, lesson)
            
            if not has_access:
                # –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —É—Ä–æ–∫—É
                error_text = await get_user_text(user_id, "errors.access_denied")
                await query.edit_message_text(error_text)
                return
            
            # –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç —É—Ä–æ–∫–∞
            await self._deliver_lesson_content(query, user_id, lesson)
            
        except Exception as e:
            logger.error(f"Error in open_lesson_callback: {e}")
            await self._send_error_message(query, user_id)
    
    async def _check_lesson_access(self, user_id: int, lesson: Dict[str, Any]) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ —É—Ä–æ–∫—É.
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            lesson: –î–∞–Ω–Ω—ã–µ —É—Ä–æ–∫–∞
            
        Returns:
            bool: True –µ—Å–ª–∏ –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø
        """
        # –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ —É—Ä–æ–∫–∏ –¥–æ—Å—Ç—É–ø–Ω—ã –≤—Å–µ–º
        if lesson.get('is_free'):
            return True
        
        # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –∫—É–ø–∏–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Ä–æ–∫
        return await self.api_client.check_user_has_lesson(user_id, lesson.get('id'))
    
    async def _deliver_lesson_content(self, query, user_id: int, lesson: Dict[str, Any]):
        """
        –î–æ—Å—Ç–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç —É—Ä–æ–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
        
        Args:
            query: Callback query
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            lesson: –î–∞–Ω–Ω—ã–µ —É—Ä–æ–∫–∞
        """
        user_lang = await get_user_language(user_id)
        lesson_id = lesson.get('id')
        
        try:
            # –£–≤–µ–¥–æ–º–∏—Ç—å –æ –Ω–∞—á–∞–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏
            loading_text = await get_user_text(user_id, "common.loading")
            await query.edit_message_text(loading_text)
            
            # –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∏–¥–µ–æ (–µ—Å–ª–∏ –µ—Å—Ç—å)
            video_sent = False
            if lesson.get('video_path'):
                video_sent = await self._send_video_content(query, user_id, lesson)
            
            # –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç (–µ—Å–ª–∏ –µ—Å—Ç—å)
            if lesson.get('text_content'):
                await self._send_text_content(query, user_id, lesson, not video_sent)
            
            # –ï—Å–ª–∏ –Ω–∏ –≤–∏–¥–µ–æ, –Ω–∏ —Ç–µ–∫—Å—Ç–∞ –Ω–µ—Ç
            if not lesson.get('video_path') and not lesson.get('text_content'):
                no_content_text = await get_user_text(user_id, "errors.no_content")
                keyboard = KeyboardBuilder.back_to_main(user_lang)
                
                await query.edit_message_text(
                    no_content_text,
                    reply_markup=keyboard
                )
            
        except Exception as e:
            logger.error(f"Error delivering lesson content: {e}")
            error_text = await get_user_text(user_id, "errors.general")
            await query.edit_message_text(error_text)
    
    async def _send_video_content(self, query, user_id: int, lesson: Dict[str, Any]) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∏–¥–µ–æ –∫–æ–Ω—Ç–µ–Ω—Ç —É—Ä–æ–∫–∞.
        
        Args:
            query: Callback query
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            lesson: –î–∞–Ω–Ω—ã–µ —É—Ä–æ–∫–∞
            
        Returns:
            bool: True –µ—Å–ª–∏ –≤–∏–¥–µ–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ
        """
        try:
            video_path = lesson.get('video_path')
            if not video_path:
                return False
            
            # –ü–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ –≤–∏–¥–µ–æ —Ñ–∞–π–ª—É
            full_video_path = os.path.join(settings.get_storage_path('videos'), video_path)
            
            if not os.path.exists(full_video_path):
                logger.warning(f"Video file not found: {full_video_path}")
                return False
            
            # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
            file_size = os.path.getsize(full_video_path)
            max_size = 50 * 1024 * 1024  # 50MB –ª–∏–º–∏—Ç Telegram
            
            if file_size > max_size:
                logger.warning(f"Video file too large: {file_size} bytes")
                # TODO: –ú–æ–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –∑–∞–≥—Ä—É–∑–∫—É –ø–æ —á–∞—Å—Ç—è–º –∏–ª–∏ –≤–Ω–µ—à–Ω–∏–µ —Å—Å—ã–ª–∫–∏
                return False
            
            # –°–æ–∑–¥–∞—Ç—å caption —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± —É—Ä–æ–∫–µ
            caption = f"üìñ {lesson.get('title', '')}\n\n"
            if lesson.get('description'):
                # –û–≥—Ä–∞–Ω–∏—á–∏—Ç—å –¥–ª–∏–Ω—É –æ–ø–∏—Å–∞–Ω–∏—è
                desc = lesson.get('description')
                if len(desc) > 200:
                    desc = desc[:197] + "..."
                caption += desc
            
            # –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∏–¥–µ–æ
            with open(full_video_path, 'rb') as video_file:
                await query.message.reply_video(
                    video=InputFile(video_file, filename=f"lesson_{lesson.get('id')}.mp4"),
                    caption=caption,
                    parse_mode=ParseMode.HTML
                )
            
            logger.info(f"Video sent for lesson {lesson.get('id')} to user {user_id}")
            return True
            
        except Exception as e:
            logger.error(f"Error sending video content: {e}")
            return False
    
    async def _send_text_content(self, query, user_id: int, lesson: Dict[str, Any], edit_original: bool = True):
        """
        –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç —É—Ä–æ–∫–∞.
        
        Args:
            query: Callback query
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            lesson: –î–∞–Ω–Ω—ã–µ —É—Ä–æ–∫–∞
            edit_original: –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ
        """
        try:
            text_content = lesson.get('text_content', '')
            if not text_content:
                return
            
            # –°–æ–∑–¥–∞—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫ —É—Ä–æ–∫–∞
            lesson_header = f"üìñ <b>{lesson.get('title', '')}</b>\n\n"
            
            # –û–≥—Ä–∞–Ω–∏—á–∏—Ç—å –¥–ª–∏–Ω—É —Ç–µ–∫—Å—Ç–∞ (Telegram –ª–∏–º–∏—Ç 4096 —Å–∏–º–≤–æ–ª–æ–≤)
            max_text_length = 4096 - len(lesson_header) - 100  # –û—Å—Ç–∞–≤–∏—Ç—å –º–µ—Å—Ç–æ –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
            
            if len(text_content) > max_text_length:
                text_content = text_content[:max_text_length] + "\n\n... (—Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –æ–±—Ä–µ–∑–∞–Ω–æ)"
            
            full_text = lesson_header + text_content
            
            # –°–æ–∑–¥–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
            user_lang = await get_user_language(user_id)
            keyboard = KeyboardBuilder.back_to_main(user_lang)
            
            if edit_original:
                await query.edit_message_text(
                    full_text,
                    reply_markup=keyboard,
                    parse_mode=ParseMode.HTML
                )
            else:
                await query.message.reply_text(
                    full_text,
                    reply_markup=keyboard,
                    parse_mode=ParseMode.HTML
                )
            
            logger.info(f"Text content sent for lesson {lesson.get('id')} to user {user_id}")
            
        except Exception as e:
            logger.error(f"Error sending text content: {e}")
    
    async def _format_lesson_details(self, lesson: Dict[str, Any], user_id: int, user_purchased: bool) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–µ—Ç–∞–ª–∏ —É—Ä–æ–∫–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.
        
        Args:
            lesson: –î–∞–Ω–Ω—ã–µ —É—Ä–æ–∫–∞
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_purchased: –ö—É–ø–∏–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Ä–æ–∫
            
        Returns:
            str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
        """
        title = lesson.get('title', 'No title')
        description = lesson.get('description', '')
        price = lesson.get('price', 0)
        is_free = lesson.get('is_free', False)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        text = f"üìñ <b>{title}</b>\n\n"
        
        # –û–ø–∏—Å–∞–Ω–∏–µ
        if description:
            # –û–≥—Ä–∞–Ω–∏—á–∏—Ç—å –¥–ª–∏–Ω—É –æ–ø–∏—Å–∞–Ω–∏—è –¥–ª—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
            if len(description) > 300:
                description = description[:297] + "..."
            text += f"{description}\n\n"
        
        # –¶–µ–Ω–∞
        if is_free:
            price_text = await get_user_text(user_id, "lessons.free_lesson")
        else:
            price_text = await get_user_text(user_id, "lessons.price", price=f"{price} ‚≠ê")
        
        text += f"{price_text}\n\n"
        
        # –°—Ç–∞—Ç—É—Å –¥–æ—Å—Ç—É–ø–∞
        if user_purchased:
            status_text = await get_user_text(user_id, "lessons.already_purchased")
            text += f"‚úÖ {status_text}"
        elif is_free:
            status_text = await get_user_text(user_id, "common.free")
            text += f"üÜì {status_text}"
        
        return text
    
    async def search_lessons_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∏—Å–∫–∞ —É—Ä–æ–∫–æ–≤.
        TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å, –∫–æ–≥–¥–∞ –≤ API –±—É–¥–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –ø–æ–∏—Å–∫–∞.
        """
        query = update.callback_query
        user_id = update.effective_user.id
        
        if query:
            await query.answer("üîç Search feature coming soon!")
    
    async def _send_error_message(self, query, user_id: int):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ."""
        try:
            error_text = await get_user_text(user_id, "errors.general")
            keyboard = KeyboardBuilder.back_to_main(await get_user_language(user_id))
            
            await query.edit_message_text(
                error_text,
                reply_markup=keyboard
            )
        except Exception as e:
            logger.error(f"Error sending error message: {e}")


# –§–∞–±—Ä–∏–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
def create_lesson_handlers(state_manager: StateManager) -> LessonHandlers:
    """–°–æ–∑–¥–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —É—Ä–æ–∫–æ–≤."""
    return LessonHandlers(state_manager)