"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ä–∞—Å—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –±–æ—Ç–∞.
–í–∫–ª—é—á–∞–µ—Ç –º–∞—Å—Å–æ–≤—É—é —Ä–∞—Å—Å—ã–ª–∫—É –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞–º–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞.
"""

import asyncio
import logging
from datetime import datetime, timedelta
from typing import Optional, List, Dict, Any

from telegram import Update, InlineKeyboardMarkup, ParseMode
from telegram.ext import ContextTypes, ConversationHandler
from telegram.error import TelegramError, Forbidden, BadRequest
from sqlalchemy.orm import Session
from sqlalchemy import desc, and_

from shared.database import get_db
from shared.models import User, Purchase, BotSettings
from bot.keyboards.admin_keyboards import AdminKeyboards
from bot.utils.state_manager import StateManager

logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫
(
    BROADCAST_MESSAGE,
    BROADCAST_CONFIRM,
    SETTINGS_ADD_KEY,
    SETTINGS_ADD_VALUE,
    SETTINGS_EDIT_VALUE
) = range(5)


class BroadcastSettingsHandlers:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ä–∞—Å—Å—ã–ª–∫–∏ –∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫."""
    
    def __init__(self, state_manager: StateManager):
        self.state_manager = state_manager
        self.keyboards = AdminKeyboards()
    
    async def is_admin(self, telegram_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."""
        db = next(get_db())
        try:
            user = db.query(User).filter(User.telegram_id == telegram_id).first()
            return user and user.is_admin
        finally:
            db.close()
    
    # === –†–ê–°–°–´–õ–ö–ê –°–û–û–ë–©–ï–ù–ò–ô ===
    
    async def broadcast_start(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–ù–∞—á–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏."""
        query = update.callback_query
        await query.answer()
        
        if not await self.is_admin(update.effective_user.id):
            await query.edit_message_text("‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞.")
            return ConversationHandler.END
        
        text = (
            "üì¢ **–°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏**\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è:\n"
            "‚Ä¢ –¢–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å Markdown —Ä–∞–∑–º–µ—Ç–∫–æ–π\n"
            "‚Ä¢ –§–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—è–º–∏\n"
            "‚Ä¢ –í–∏–¥–µ–æ —Å –ø–æ–¥–ø–∏—Å—è–º–∏\n"
            "‚Ä¢ –î–æ–∫—É–º–µ–Ω—Ç—ã\n\n"
            "‚ö†Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤—Å–µ–º –∞–∫—Ç–∏–≤–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º!"
        )
        
        keyboard = self.keyboards.get_back_to_admin_menu()
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            text,
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=reply_markup
        )
        
        return BROADCAST_MESSAGE
    
    async def broadcast_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏."""
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        context.user_data['broadcast_message'] = update.message
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π
        db = next(get_db())
        try:
            total_users = db.query(User).filter(User.is_active == True).count()
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–≤—å—é –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
            text = (
                f"üì¢ **–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏**\n\n"
                f"üë• –ü–æ–ª—É—á–∞—Ç–µ–ª–µ–π: {total_users} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n\n"
                f"üìù **–ü—Ä–µ–≤—å—é —Å–æ–æ–±—â–µ–Ω–∏—è:**\n"
            )
            
            if update.message.text:
                text += f"```\n{update.message.text[:200]}{'...' if len(update.message.text) > 200 else ''}\n```"
            elif update.message.photo:
                text += "üì∑ –§–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é"
            elif update.message.video:
                text += "üìπ –í–∏–¥–µ–æ —Å –ø–æ–¥–ø–∏—Å—å—é"
            elif update.message.document:
                text += "üìÑ –î–æ–∫—É–º–µ–Ω—Ç"
            
            keyboard = self.keyboards.get_confirm_broadcast_menu("all")
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(
                text,
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=reply_markup
            )
            
            return BROADCAST_CONFIRM
            
        finally:
            db.close()
    
    async def broadcast_confirm(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∏ –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É."""
        query = update.callback_query
        await query.answer()
        
        action = query.data.split(":")[-1]
        
        if action == "all":
            await self.start_broadcast(update, context, "all")
        else:
            await query.edit_message_text("‚ùå –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        
        context.user_data.clear()
        return ConversationHandler.END
    
    async def start_broadcast(self, update: Update, context: ContextTypes.DEFAULT_TYPE, target: str) -> None:
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É."""
        query = update.callback_query
        broadcast_message = context.user_data.get('broadcast_message')
        
        if not broadcast_message:
            await query.edit_message_text("‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π
        db = next(get_db())
        try:
            if target == "all":
                users = db.query(User).filter(User.is_active == True).all()
            elif target == "admins":
                users = db.query(User).filter(
                    and_(User.is_active == True, User.is_admin == True)
                ).all()
            elif target == "buyers":
                # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å –ø–æ–∫—É–ø–∫–∞–º–∏
                user_ids = db.query(Purchase.user_id).filter(
                    Purchase.status == "completed"
                ).distinct().all()
                users = db.query(User).filter(
                    and_(User.is_active == True, User.id.in_([uid[0] for uid in user_ids]))
                ).all()
            elif target == "new":
                # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
                week_ago = datetime.now() - timedelta(days=7)
                users = db.query(User).filter(
                    and_(User.is_active == True, User.created_at >= week_ago)
                ).all()
            else:
                users = []
            
            total_users = len(users)
            
            await query.edit_message_text(
                f"üì¢ **–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞**\n\n"
                f"üë• –ü–æ–ª—É—á–∞—Ç–µ–ª–µ–π: {total_users}\n"
                f"‚è≥ –ù–∞—á–∏–Ω–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É...",
                parse_mode=ParseMode.MARKDOWN
            )
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É –≤ —Ñ–æ–Ω–µ
            asyncio.create_task(
                self.send_broadcast_messages(
                    context.bot, 
                    users, 
                    broadcast_message, 
                    query.message.chat_id,
                    query.message.message_id
                )
            )
            
        finally:
            db.close()
    
    async def send_broadcast_messages(
        self, 
        bot, 
        users: List[User], 
        message, 
        admin_chat_id: int, 
        status_message_id: int
    ) -> None:
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º."""
        total_users = len(users)
        sent_count = 0
        failed_count = 0
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–∞–∂–¥—ã–µ 10 –æ—Ç–ø—Ä–∞–≤–æ–∫
        update_interval = max(1, total_users // 20)
        
        for i, user in enumerate(users):
            try:
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
                if message.text:
                    await bot.send_message(
                        chat_id=user.telegram_id,
                        text=message.text,
                        parse_mode=ParseMode.MARKDOWN
                    )
                elif message.photo:
                    await bot.send_photo(
                        chat_id=user.telegram_id,
                        photo=message.photo[-1].file_id,
                        caption=message.caption,
                        parse_mode=ParseMode.MARKDOWN
                    )
                elif message.video:
                    await bot.send_video(
                        chat_id=user.telegram_id,
                        video=message.video.file_id,
                        caption=message.caption,
                        parse_mode=ParseMode.MARKDOWN
                    )
                elif message.document:
                    await bot.send_document(
                        chat_id=user.telegram_id,
                        document=message.document.file_id,
                        caption=message.caption,
                        parse_mode=ParseMode.MARKDOWN
                    )
                
                sent_count += 1
                
                # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏
                await asyncio.sleep(0.05)  # 50ms –∑–∞–¥–µ—Ä–∂–∫–∞
                
            except (Forbidden, BadRequest) as e:
                # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞ –∏–ª–∏ —É–¥–∞–ª–∏–ª –∞–∫–∫–∞—É–Ω—Ç
                failed_count += 1
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.telegram_id}: {e}")
                
                # –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –æ–Ω –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞
                if isinstance(e, Forbidden):
                    db = next(get_db())
                    try:
                        user.is_active = False
                        db.commit()
                    finally:
                        db.close()
                        
            except TelegramError as e:
                failed_count += 1
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.telegram_id}: {e}")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
            if (i + 1) % update_interval == 0 or i == total_users - 1:
                try:
                    progress = (i + 1) / total_users * 100
                    status_text = (
                        f"üì¢ **–†–∞—Å—Å—ã–ª–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ**\n\n"
                        f"üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: {progress:.1f}%\n"
                        f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent_count}\n"
                        f"‚ùå –û—à–∏–±–æ–∫: {failed_count}\n"
                        f"üìù –û—Å—Ç–∞–ª–æ—Å—å: {total_users - i - 1}"
                    )
                    
                    await bot.edit_message_text(
                        text=status_text,
                        chat_id=admin_chat_id,
                        message_id=status_message_id,
                        parse_mode=ParseMode.MARKDOWN
                    )
                except Exception:
                    pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
        
        # –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
        try:
            final_text = (
                f"üì¢ **–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!**\n\n"
                f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
                f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent_count}\n"
                f"‚ùå –û—à–∏–±–æ–∫: {failed_count}\n"
                f"üìä –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {sent_count/total_users*100:.1f}%\n\n"
                f"‚è∞ –ó–∞–≤–µ—Ä—à–µ–Ω–æ: {datetime.now().strftime('%H:%M:%S')}"
            )
            
            await bot.edit_message_text(
                text=final_text,
                chat_id=admin_chat_id,
                message_id=status_message_id,
                parse_mode=ParseMode.MARKDOWN
            )
        except Exception:
            pass
    
    # === –£–ü–†–ê–í–õ–ï–ù–ò–ï –ù–ê–°–¢–†–û–ô–ö–ê–ú–ò ===
    
    async def settings_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫."""
        db = next(get_db())
        try:
            settings_count = db.query(BotSettings).filter(BotSettings.is_active == True).count()
            
            text = (
                f"‚öôÔ∏è **–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞**\n\n"
                f"üìä –í—Å–µ–≥–æ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {settings_count}\n\n"
                f"–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:"
            )
            
            keyboard = self.keyboards.get_settings_menu()
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            if update.callback_query:
                await update.callback_query.edit_message_text(
                    text,
                    parse_mode=ParseMode.MARKDOWN,
                    reply_markup=reply_markup
                )
            else:
                await update.message.reply_text(
                    text,
                    parse_mode=ParseMode.MARKDOWN,
                    reply_markup=reply_markup
                )
        finally:
            db.close()
    
    async def settings_category(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏."""
        query = update.callback_query
        await query.answer()
        
        category = query.data.split(":")[-1]
        
        db = next(get_db())
        try:
            settings = db.query(BotSettings).filter(
                and_(BotSettings.category == category, BotSettings.is_active == True)
            ).all()
            
            category_names = {
                "messages": "–¢–µ–∫—Å—Ç—ã —Å–æ–æ–±—â–µ–Ω–∏–π",
                "buttons": "–ù–∞–∑–≤–∞–Ω–∏—è –∫–Ω–æ–ø–æ–∫", 
                "general": "–û–±—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏",
                "notifications": "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"
            }
            
            text = f"‚öôÔ∏è **{category_names.get(category, category)}**\n\n"
            
            if settings:
                for setting in settings:
                    text += (
                        f"üîß **{setting.key}**\n"
                        f"   {setting.value[:100]}{'...' if len(setting.value) > 100 else ''}\n"
                        f"   {setting.description or '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è'}\n\n"
                    )
            else:
                text += "–í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫."
            
            keyboard = self.keyboards.get_settings_category_menu(category)
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(
                text,
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=reply_markup
            )
        finally:
            db.close()
    
    async def add_setting_start(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–ù–∞—á–∞—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏."""
        query = update.callback_query
        await query.answer()
        
        category = query.data.split(":")[-1] if len(query.data.split(":")) > 2 else "general"
        context.user_data['setting_category'] = category
        
        await query.edit_message_text(
            f"‚öôÔ∏è **–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏**\n\n"
            f"üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}\n\n"
            f"–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: welcome_message):",
            parse_mode=ParseMode.MARKDOWN
        )
        
        return SETTINGS_ADD_KEY
    
    async def add_setting_key(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–ü–æ–ª—É—á–∏—Ç—å –∫–ª—é—á –Ω–∞—Å—Ç—Ä–æ–π–∫–∏."""
        key = update.message.text.strip().lower()
        
        if not key.replace('_', '').isalnum() or len(key) < 3:
            await update.message.reply_text(
                "‚ùå –ö–ª—é—á –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è, –º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞:"
            )
            return SETTINGS_ADD_KEY
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å
        db = next(get_db())
        try:
            existing = db.query(BotSettings).filter(BotSettings.key == key).first()
            if existing:
                await update.message.reply_text(
                    "‚ùå –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å —Ç–∞–∫–∏–º –∫–ª—é—á–æ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–π –∫–ª—é—á:"
                )
                return SETTINGS_ADD_KEY
        finally:
            db.close()
        
        context.user_data['setting_key'] = key
        
        await update.message.reply_text(
            f"‚úÖ –ö–ª—é—á: {key}\n\n"
            "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:"
        )
        
        return SETTINGS_ADD_VALUE
    
    async def add_setting_value(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–ü–æ–ª—É—á–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –∏ —Å–æ–∑–¥–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É."""
        value = update.message.text.strip()
        
        if len(value) < 1:
            await update.message.reply_text(
                "‚ùå –ó–Ω–∞—á–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º:"
            )
            return SETTINGS_ADD_VALUE
        
        # –°–æ–∑–¥–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É
        db = next(get_db())
        try:
            setting = BotSettings(
                key=context.user_data['setting_key'],
                value=value,
                category=context.user_data['setting_category'],
                is_active=True
            )
            
            db.add(setting)
            db.commit()
            db.refresh(setting)
            
            await update.message.reply_text(
                f"‚úÖ **–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–æ–∑–¥–∞–Ω–∞!**\n\n"
                f"üîß –ö–ª—é—á: `{setting.key}`\n"
                f"üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {setting.category}\n"
                f"üìù –ó–Ω–∞—á–µ–Ω–∏–µ: {setting.value[:100]}{'...' if len(setting.value) > 100 else ''}",
                parse_mode=ParseMode.MARKDOWN
            )
            
            context.user_data.clear()
            return ConversationHandler.END
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.")
            return ConversationHandler.END
        finally:
            db.close()
    
    def get_setting_value(self, key: str, default: str = "") -> str:
        """–ü–æ–ª—É—á–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ –∫–ª—é—á—É."""
        db = next(get_db())
        try:
            setting = db.query(BotSettings).filter(
                and_(BotSettings.key == key, BotSettings.is_active == True)
            ).first()
            return setting.value if setting else default
        finally:
            db.close()


def create_broadcast_settings_handlers(state_manager: StateManager) -> BroadcastSettingsHandlers:
    """–°–æ–∑–¥–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ä–∞—Å—Å—ã–ª–∫–∏ –∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫."""
    return BroadcastSettingsHandlers(state_manager)