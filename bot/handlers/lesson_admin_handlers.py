"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É—Ä–æ–∫–∞–º–∏ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.
CRUD –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è —É—Ä–æ–∫–æ–≤, –∫—É—Ä—Å–æ–≤ –∏ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤.
"""

import logging
from typing import Optional, List, Dict, Any
from datetime import datetime

from telegram import Update, InlineKeyboardMarkup, ParseMode
from telegram.ext import ContextTypes, ConversationHandler
from sqlalchemy.orm import Session
from sqlalchemy import desc

from bot.shared.database import get_db
from bot.shared.models import User, Lesson, Course, Purchase, PromoCode, CourseLesson
from bot.keyboards.admin_keyboards import AdminKeyboards
from bot.utils.state_manager import StateManager

logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É—Ä–æ–∫–∞–º–∏
(
    LESSON_ADD_TITLE,
    LESSON_ADD_DESCRIPTION,
    LESSON_ADD_PRICE,
    LESSON_ADD_CONTENT,
    LESSON_EDIT_TITLE,
    LESSON_EDIT_DESCRIPTION,
    LESSON_EDIT_PRICE,
    LESSON_EDIT_CONTENT,
    PROMO_ADD_CODE,
    PROMO_ADD_DISCOUNT,
    PROMO_ADD_LIMIT
) = range(11)


class LessonAdminHandlers:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É—Ä–æ–∫–∞–º–∏."""
    
    def __init__(self, state_manager: StateManager):
        self.state_manager = state_manager
        self.keyboards = AdminKeyboards()
    
    async def is_admin(self, telegram_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."""
        db = next(get_db())
        try:
            user = db.query(User).filter(User.telegram_id == telegram_id).first()
            return user and user.is_admin
        finally:
            db.close()
    
    # === –£–ü–†–ê–í–õ–ï–ù–ò–ï –£–†–û–ö–ê–ú–ò ===
    
    async def add_lesson_start(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–ù–∞—á–∞—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —É—Ä–æ–∫–∞."""
        query = update.callback_query
        await query.answer()
        
        if not await self.is_admin(update.effective_user.id):
            await query.edit_message_text("‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞.")
            return ConversationHandler.END
        
        await query.edit_message_text(
            "üìö **–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —É—Ä–æ–∫–∞**\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —É—Ä–æ–∫–∞:",
            parse_mode=ParseMode.MARKDOWN
        )
        
        return LESSON_ADD_TITLE
    
    async def add_lesson_title(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–ü–æ–ª—É—á–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ —É—Ä–æ–∫–∞."""
        title = update.message.text.strip()
        
        if len(title) < 3 or len(title) > 255:
            await update.message.reply_text(
                "‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 3 –¥–æ 255 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
            )
            return LESSON_ADD_TITLE
        
        context.user_data['lesson_title'] = title
        
        await update.message.reply_text(
            f"‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ: {title}\n\n"
            "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —É—Ä–æ–∫–∞:"
        )
        
        return LESSON_ADD_DESCRIPTION
    
    async def add_lesson_description(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–ü–æ–ª—É—á–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ —É—Ä–æ–∫–∞."""
        description = update.message.text.strip()
        
        if len(description) < 10:
            await update.message.reply_text(
                "‚ùå –û–ø–∏—Å–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 10 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
            )
            return LESSON_ADD_DESCRIPTION
        
        context.user_data['lesson_description'] = description
        
        await update.message.reply_text(
            f"‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ\n\n"
            "–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É —É—Ä–æ–∫–∞ –≤ Telegram Stars (—á–∏—Å–ª–æ):"
        )
        
        return LESSON_ADD_PRICE
    
    async def add_lesson_price(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–ü–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É —É—Ä–æ–∫–∞."""
        try:
            price = int(update.message.text.strip())
            if price < 0:
                raise ValueError("–û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–∞—è —Ü–µ–Ω–∞")
        except ValueError:
            await update.message.reply_text(
                "‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–Ω—É (–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ):"
            )
            return LESSON_ADD_PRICE
        
        context.user_data['lesson_price'] = price
        
        await update.message.reply_text(
            f"‚úÖ –¶–µ–Ω–∞: ‚≠ê{price}\n\n"
            "–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–Ω—Ç–µ–Ω—Ç —É—Ä–æ–∫–∞:\n"
            "- –¢–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ\n"
            "- –í–∏–¥–µ–æ —Ñ–∞–π–ª\n"
            "- –ò–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å' –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–∑–∂–µ"
        )
        
        return LESSON_ADD_CONTENT
    
    async def add_lesson_content(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç —É—Ä–æ–∫–∞."""
        content = None
        video_path = None
        
        if update.message.text:
            if update.message.text.strip().lower() == '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å':
                content = ""
            else:
                content = update.message.text.strip()
        
        if update.message.video:
            # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤–∏–¥–µ–æ —Ñ–∞–π–ª
            file = await update.message.video.get_file()
            video_path = f"storage/videos/lesson_{datetime.now().timestamp()}.mp4"
            await file.download_to_drive(video_path)
        
        # –°–æ–∑–¥–∞—Ç—å —É—Ä–æ–∫ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        db = next(get_db())
        try:
            lesson = Lesson(
                title=context.user_data['lesson_title'],
                description=context.user_data['lesson_description'],
                price=context.user_data['lesson_price'],
                text_content=content,
                video_path=video_path,
                is_active=True,
                is_free=context.user_data['lesson_price'] == 0
            )
            
            db.add(lesson)
            db.commit()
            db.refresh(lesson)
            
            await update.message.reply_text(
                f"‚úÖ **–£—Ä–æ–∫ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!**\n\n"
                f"üìö –ù–∞–∑–≤–∞–Ω–∏–µ: {lesson.title}\n"
                f"üí∞ –¶–µ–Ω–∞: ‚≠ê{lesson.price}\n"
                f"üÜî ID: {lesson.id}\n\n"
                f"–£—Ä–æ–∫ –∞–∫—Ç–∏–≤–µ–Ω –∏ –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –ø–æ–∫—É–ø–∫–∏.",
                parse_mode=ParseMode.MARKDOWN
            )
            
            # –û—á–∏—Å—Ç–∏—Ç—å –¥–∞–Ω–Ω—ã–µ
            context.user_data.clear()
            
            return ConversationHandler.END
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —É—Ä–æ–∫–∞: {e}")
            await update.message.reply_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —É—Ä–æ–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ."
            )
            return ConversationHandler.END
        finally:
            db.close()
    
    async def list_lessons(self, update: Update, context: ContextTypes.DEFAULT_TYPE, page: int = 0) -> None:
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —É—Ä–æ–∫–æ–≤."""
        db = next(get_db())
        try:
            per_page = 10
            offset = page * per_page
            
            lessons = db.query(Lesson).order_by(desc(Lesson.created_at)).offset(offset).limit(per_page).all()
            total_lessons = db.query(Lesson).count()
            
            if not lessons:
                text = "üìö –£—Ä–æ–∫–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç."
            else:
                text = f"üìö **–°–ø–∏—Å–æ–∫ —É—Ä–æ–∫–æ–≤** (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1})\n\n"
                
                for i, lesson in enumerate(lessons, start=offset + 1):
                    status = "‚úÖ" if lesson.is_active else "‚ùå"
                    free_mark = "üÜì" if lesson.is_free else ""
                    text += (
                        f"{i}. {status} {free_mark} **{lesson.title}**\n"
                        f"   üí∞ ‚≠ê{lesson.price} | üÜî {lesson.id}\n"
                        f"   üìù {lesson.description[:50]}{'...' if len(lesson.description) > 50 else ''}\n\n"
                    )
                
                text += f"üìä –í—Å–µ–≥–æ —É—Ä–æ–∫–æ–≤: {total_lessons}"
            
            keyboard = self.keyboards.get_lesson_list_menu(page)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É—Ä–æ–∫–æ–≤
            if lessons:
                edit_buttons = []
                for lesson in lessons[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–µ—Ä–≤—ã—Ö 5 —É—Ä–æ–∫–æ–≤
                    edit_buttons.append([
                        InlineKeyboardButton(
                            f"‚úèÔ∏è {lesson.title[:20]}...", 
                            callback_data=f"lesson:edit:{lesson.id}"
                        )
                    ])
                keyboard = edit_buttons + keyboard
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            if update.callback_query:
                await update.callback_query.edit_message_text(
                    text,
                    parse_mode=ParseMode.MARKDOWN,
                    reply_markup=reply_markup
                )
            else:
                await update.message.reply_text(
                    text,
                    parse_mode=ParseMode.MARKDOWN,
                    reply_markup=reply_markup
                )
        finally:
            db.close()
    
    async def edit_lesson(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É—Ä–æ–∫–∞."""
        query = update.callback_query
        await query.answer()
        
        lesson_id = int(query.data.split(":")[-1])
        
        db = next(get_db())
        try:
            lesson = db.query(Lesson).filter(Lesson.id == lesson_id).first()
            
            if not lesson:
                await query.edit_message_text("‚ùå –£—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                return
            
            text = (
                f"üìù **–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Ä–æ–∫–∞**\n\n"
                f"üìö **–ù–∞–∑–≤–∞–Ω–∏–µ:** {lesson.title}\n"
                f"üìÑ **–û–ø–∏—Å–∞–Ω–∏–µ:** {lesson.description[:100]}{'...' if len(lesson.description) > 100 else ''}\n"
                f"üí∞ **–¶–µ–Ω–∞:** ‚≠ê{lesson.price}\n"
                f"üìä **–°—Ç–∞—Ç—É—Å:** {'–ê–∫—Ç–∏–≤–Ω—ã–π' if lesson.is_active else '–ù–µ–∞–∫—Ç–∏–≤–Ω—ã–π'}\n"
                f"üÜì **–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π:** {'–î–∞' if lesson.is_free else '–ù–µ—Ç'}\n"
                f"üìπ **–í–∏–¥–µ–æ:** {'–ï—Å—Ç—å' if lesson.video_path else '–ù–µ—Ç'}\n"
                f"üÜî **ID:** {lesson.id}"
            )
            
            keyboard = self.keyboards.get_lesson_edit_menu(lesson_id)
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(
                text,
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=reply_markup
            )
        finally:
            db.close()
    
    async def delete_lesson(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–£–¥–∞–ª–∏—Ç—å —É—Ä–æ–∫."""
        query = update.callback_query
        await query.answer()
        
        lesson_id = int(query.data.split(":")[-1])
        
        db = next(get_db())
        try:
            lesson = db.query(Lesson).filter(Lesson.id == lesson_id).first()
            
            if not lesson:
                await query.edit_message_text("‚ùå –£—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–∫—É–ø–∫–∏ —ç—Ç–æ–≥–æ —É—Ä–æ–∫–∞
            purchases = db.query(Purchase).filter(Purchase.lesson_id == lesson_id).count()
            
            if purchases > 0:
                # –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º —É—Ä–æ–∫ –≤–º–µ—Å—Ç–æ —É–¥–∞–ª–µ–Ω–∏—è
                lesson.is_active = False
                db.commit()
                
                await query.edit_message_text(
                    f"‚ö†Ô∏è –£—Ä–æ–∫ '{lesson.title}' –±—ã–ª –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω, —Ç–∞–∫ –∫–∞–∫ –∏–º–µ–µ—Ç {purchases} –ø–æ–∫—É–ø–æ–∫.\n"
                    f"–£—Ä–æ–∫ –±–æ–ª—å—à–µ –Ω–µ –±—É–¥–µ—Ç –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º, –Ω–æ –æ—Å—Ç–∞–Ω–µ—Ç—Å—è –≤ —Å–∏—Å—Ç–µ–º–µ."
                )
            else:
                # –£–¥–∞–ª—è–µ–º —É—Ä–æ–∫ –ø–æ–ª–Ω–æ—Å—Ç—å—é
                db.delete(lesson)
                db.commit()
                
                await query.edit_message_text(
                    f"‚úÖ –£—Ä–æ–∫ '{lesson.title}' –±—ã–ª —É–¥–∞–ª–µ–Ω."
                )
        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —É—Ä–æ–∫–∞: {e}")
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —É—Ä–æ–∫–∞.")
        finally:
            db.close()
    
    # === –£–ü–†–ê–í–õ–ï–ù–ò–ï –ü–†–û–ú–û–ö–û–î–ê–ú–ò ===
    
    async def create_promo_start(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–ù–∞—á–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞."""
        query = update.callback_query
        await query.answer()
        
        await query.edit_message_text(
            "üéÅ **–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞**\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –ø—Ä–æ–º–æ–∫–æ–¥–∞ (–ª–∞—Ç–∏–Ω—Å–∫–∏–µ –±—É–∫–≤—ã –∏ —Ü–∏—Ñ—Ä—ã):",
            parse_mode=ParseMode.MARKDOWN
        )
        
        return PROMO_ADD_CODE
    
    async def create_promo_code(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–¥ –ø—Ä–æ–º–æ–∫–æ–¥–∞."""
        code = update.message.text.strip().upper()
        
        if not code.isalnum() or len(code) < 3 or len(code) > 20:
            await update.message.reply_text(
                "‚ùå –ö–æ–¥ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –ª–∞—Ç–∏–Ω—Å–∫–∏–µ –±—É–∫–≤—ã –∏ —Ü–∏—Ñ—Ä—ã, –¥–ª–∏–Ω–∞ 3-20 —Å–∏–º–≤–æ–ª–æ–≤:"
            )
            return PROMO_ADD_CODE
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –∫–æ–¥–∞
        db = next(get_db())
        try:
            existing = db.query(PromoCode).filter(PromoCode.code == code).first()
            if existing:
                await update.message.reply_text(
                    "‚ùå –¢–∞–∫–æ–π –ø—Ä–æ–º–æ–∫–æ–¥ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–π –∫–æ–¥:"
                )
                return PROMO_ADD_CODE
        finally:
            db.close()
        
        context.user_data['promo_code'] = code
        
        await update.message.reply_text(
            f"‚úÖ –ö–æ–¥: {code}\n\n"
            "–í–≤–µ–¥–∏—Ç–µ —Ä–∞–∑–º–µ—Ä —Å–∫–∏–¥–∫–∏ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö (1-99):"
        )
        
        return PROMO_ADD_DISCOUNT
    
    async def create_promo_discount(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–ü–æ–ª—É—á–∏—Ç—å —Ä–∞–∑–º–µ—Ä —Å–∫–∏–¥–∫–∏."""
        try:
            discount = int(update.message.text.strip())
            if discount < 1 or discount > 99:
                raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω")
        except ValueError:
            await update.message.reply_text(
                "‚ùå –í–≤–µ–¥–∏—Ç–µ —Ä–∞–∑–º–µ—Ä —Å–∫–∏–¥–∫–∏ –æ—Ç 1 –¥–æ 99 –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤:"
            )
            return PROMO_ADD_DISCOUNT
        
        context.user_data['promo_discount'] = discount
        
        await update.message.reply_text(
            f"‚úÖ –°–∫–∏–¥–∫–∞: {discount}%\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π (–∏–ª–∏ 0 –¥–ª—è –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–≥–æ):"
        )
        
        return PROMO_ADD_LIMIT
    
    async def create_promo_limit(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–ü–æ–ª—É—á–∏—Ç—å –ª–∏–º–∏—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π –∏ —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥."""
        try:
            max_uses = int(update.message.text.strip())
            if max_uses < 0:
                raise ValueError("–û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ")
        except ValueError:
            await update.message.reply_text(
                "‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ (0 –∏–ª–∏ –±–æ–ª—å—à–µ):"
            )
            return PROMO_ADD_LIMIT
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–æ–∫–æ–¥
        db = next(get_db())
        try:
            promo = PromoCode(
                code=context.user_data['promo_code'],
                discount_percent=context.user_data['promo_discount'],
                max_uses=max_uses if max_uses > 0 else None,
                current_uses=0,
                is_active=True
            )
            
            db.add(promo)
            db.commit()
            db.refresh(promo)
            
            await update.message.reply_text(
                f"‚úÖ **–ü—Ä–æ–º–æ–∫–æ–¥ —Å–æ–∑–¥–∞–Ω!**\n\n"
                f"üéÅ –ö–æ–¥: `{promo.code}`\n"
                f"üí∞ –°–∫–∏–¥–∫–∞: {promo.discount_percent}%\n"
                f"üîÑ –õ–∏–º–∏—Ç: {'–ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ' if not promo.max_uses else promo.max_uses}\n"
                f"üÜî ID: {promo.id}",
                parse_mode=ParseMode.MARKDOWN
            )
            
            context.user_data.clear()
            return ConversationHandler.END
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞.")
            return ConversationHandler.END
        finally:
            db.close()
    
    async def list_promos(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤."""
        db = next(get_db())
        try:
            promos = db.query(PromoCode).order_by(desc(PromoCode.created_at)).limit(20).all()
            
            if not promos:
                text = "üéÅ –ü—Ä–æ–º–æ–∫–æ–¥–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç."
            else:
                text = "üéÅ **–°–ø–∏—Å–æ–∫ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤**\n\n"
                
                for promo in promos:
                    status = "‚úÖ" if promo.is_active else "‚ùå"
                    usage = f"{promo.current_uses}"
                    if promo.max_uses:
                        usage += f"/{promo.max_uses}"
                    else:
                        usage += "/‚àû"
                    
                    text += (
                        f"{status} **{promo.code}**\n"
                        f"   üí∞ -{promo.discount_percent}% | üîÑ {usage}\n"
                        f"   üÜî {promo.id}\n\n"
                    )
            
            keyboard = self.keyboards.get_back_to_admin_menu()
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            if update.callback_query:
                await update.callback_query.edit_message_text(
                    text,
                    parse_mode=ParseMode.MARKDOWN,
                    reply_markup=reply_markup
                )
            else:
                await update.message.reply_text(
                    text,
                    parse_mode=ParseMode.MARKDOWN,
                    reply_markup=reply_markup
                )
        finally:
            db.close()


def create_lesson_admin_handlers(state_manager: StateManager) -> LessonAdminHandlers:
    """–°–æ–∑–¥–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É—Ä–æ–∫–∞–º–∏."""
    return LessonAdminHandlers(state_manager)