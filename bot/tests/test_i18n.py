"""
–¢–µ—Å—Ç—ã –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –∏–Ω—Ç–µ—Ä–Ω–∞—Ü–∏–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏.
"""

import pytest
import json
import tempfile
from pathlib import Path

from bot.utils.i18n import TranslationManager, get_text


class TestTranslationManager:
    """–¢–µ—Å—Ç—ã –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ø–µ—Ä–µ–≤–æ–¥–æ–≤."""
    
    @pytest.fixture
    def temp_locales_dir(self):
        """–°–æ–∑–¥–∞—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é —Å –ø–µ—Ä–µ–≤–æ–¥–∞–º–∏ –¥–ª—è —Ç–µ—Å—Ç–æ–≤."""
        with tempfile.TemporaryDirectory() as temp_dir:
            locales_path = Path(temp_dir)
            
            # –°–æ–∑–¥–∞—Ç—å –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ –ø–µ—Ä–µ–≤–æ–¥—ã
            en_dir = locales_path / "en"
            en_dir.mkdir()
            
            en_messages = {
                "welcome": "Welcome to Bot!",
                "menu": {
                    "browse": "Browse Items",
                    "settings": "Settings"
                },
                "price": "Price: {amount} stars"
            }
            
            with open(en_dir / "messages.json", "w") as f:
                json.dump(en_messages, f)
            
            # –°–æ–∑–¥–∞—Ç—å —Ä—É—Å—Å–∫–∏–µ –ø–µ—Ä–µ–≤–æ–¥—ã
            ru_dir = locales_path / "ru"
            ru_dir.mkdir()
            
            ru_messages = {
                "welcome": "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ë–æ—Ç!",
                "menu": {
                    "browse": "–ü—Ä–æ—Å–º–æ—Ç—Ä —Ç–æ–≤–∞—Ä–æ–≤", 
                    "settings": "–ù–∞—Å—Ç—Ä–æ–π–∫–∏"
                },
                "price": "–¶–µ–Ω–∞: {amount} –∑–≤–µ–∑–¥"
            }
            
            with open(ru_dir / "messages.json", "w") as f:
                json.dump(ru_messages, f)
            
            yield str(locales_path)
    
    def test_load_translations(self, temp_locales_dir):
        """–¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –ø–µ—Ä–µ–≤–æ–¥–æ–≤."""
        manager = TranslationManager(temp_locales_dir)
        
        # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ —è–∑—ã–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã
        assert "en" in manager.supported_languages
        assert "ru" in manager.supported_languages
        
        # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–µ—Ä–µ–≤–æ–¥–æ–≤
        assert "welcome" in manager.translations["en"]
        assert "welcome" in manager.translations["ru"]
    
    def test_get_text_simple(self, temp_locales_dir):
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Å—Ç–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞."""
        manager = TranslationManager(temp_locales_dir)
        
        # –ê–Ω–≥–ª–∏–π—Å–∫–∏–π
        en_text = manager.get_text("welcome", "en")
        assert en_text == "Welcome to Bot!"
        
        # –†—É—Å—Å–∫–∏–π
        ru_text = manager.get_text("welcome", "ru")
        assert ru_text == "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ë–æ—Ç!"
    
    def test_get_text_nested(self, temp_locales_dir):
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –≤–ª–æ–∂–µ–Ω–Ω–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞."""
        manager = TranslationManager(temp_locales_dir)
        
        # –ê–Ω–≥–ª–∏–π—Å–∫–∏–π
        en_text = manager.get_text("menu.browse", "en")
        assert en_text == "Browse Items"
        
        # –†—É—Å—Å–∫–∏–π
        ru_text = manager.get_text("menu.settings", "ru")
        assert ru_text == "–ù–∞—Å—Ç—Ä–æ–π–∫–∏"
    
    def test_get_text_with_formatting(self, temp_locales_dir):
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞ —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º."""
        manager = TranslationManager(temp_locales_dir)
        
        # –ê–Ω–≥–ª–∏–π—Å–∫–∏–π —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        en_text = manager.get_text("price", "en", amount=100)
        assert en_text == "Price: 100 stars"
        
        # –†—É—Å—Å–∫–∏–π —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        ru_text = manager.get_text("price", "ru", amount=50)
        assert ru_text == "–¶–µ–Ω–∞: 50 –∑–≤–µ–∑–¥"
    
    def test_fallback_to_default_language(self, temp_locales_dir):
        """–¢–µ—Å—Ç fallback –Ω–∞ —è–∑—ã–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é."""
        manager = TranslationManager(temp_locales_dir)
        
        # –ó–∞–ø—Ä–æ—Å–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥ –¥–ª—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —è–∑—ã–∫–∞
        text = manager.get_text("welcome", "fr")
        
        # –î–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å –∞–Ω–≥–ª–∏–π—Å–∫–∏–π (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
        assert text == "Welcome to Bot!"
    
    def test_missing_translation_key(self, temp_locales_dir):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–µ–≥–æ –∫–ª—é—á–∞ –ø–µ—Ä–µ–≤–æ–¥–∞."""
        manager = TranslationManager(temp_locales_dir)
        
        # –ó–∞–ø—Ä–æ—Å–∏—Ç—å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–ª—é—á
        text = manager.get_text("nonexistent.key", "en")
        
        # –î–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å –∫–ª—é—á –∫–∞–∫ –µ—Å—Ç—å
        assert text == "nonexistent.key"
    
    def test_format_price(self, temp_locales_dir):
        """–¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ü–µ–Ω—ã."""
        manager = TranslationManager(temp_locales_dir)
        
        # –ê–Ω–≥–ª–∏–π—Å–∫–∏–π
        en_price = manager.format_price(1, "en")
        assert "1 ‚≠ê star" in en_price
        
        en_price_plural = manager.format_price(5, "en")
        assert "5 ‚≠ê stars" in en_price_plural
        
        # –†—É—Å—Å–∫–∏–π
        ru_price_1 = manager.format_price(1, "ru")
        assert "1 ‚≠ê –∑–≤–µ–∑–¥–∞" in ru_price_1
        
        ru_price_2 = manager.format_price(2, "ru")
        assert "2 ‚≠ê –∑–≤–µ–∑–¥—ã" in ru_price_2
        
        ru_price_5 = manager.format_price(5, "ru")
        assert "5 ‚≠ê –∑–≤–µ–∑–¥" in ru_price_5
    
    def test_get_supported_languages(self, temp_locales_dir):
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —è–∑—ã–∫–æ–≤."""
        manager = TranslationManager(temp_locales_dir)
        
        languages = manager.get_supported_languages()
        
        # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É
        assert isinstance(languages, list)
        assert len(languages) >= 2
        
        # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
        lang_codes = [lang['code'] for lang in languages]
        assert 'en' in lang_codes
        assert 'ru' in lang_codes
        
        # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–ª–∏—á–∏–µ —Ñ–ª–∞–≥–æ–≤
        for lang in languages:
            assert 'name' in lang
            assert 'üá∫üá∏' in lang['name'] or 'üá∑üá∫' in lang['name']


def test_global_get_text_function():
    """–¢–µ—Å—Ç –≥–ª–æ–±–∞–ª—å–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ get_text."""
    # –¢–µ—Å—Ç —Å –±–∞–∑–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å—é
    text = get_text("nonexistent.key", "en")
    assert text == "nonexistent.key"  # Fallback
    
    # –¢–µ—Å—Ç —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    text_with_params = get_text("test.key", "en", param="value")
    assert "test.key" in text_with_params  # –î–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å –∫–ª—é—á –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –ø–µ—Ä–µ–≤–æ–¥–∞


class TestLanguageDetection:
    """–¢–µ—Å—Ç—ã –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —è–∑—ã–∫–æ–≤."""
    
    def test_language_flag_mapping(self):
        """–¢–µ—Å—Ç –º–∞–ø–ø–∏–Ω–≥–∞ —Ñ–ª–∞–≥–æ–≤ —è–∑—ã–∫–æ–≤."""
        from bot.utils.i18n import TranslationManager
        
        manager = TranslationManager()
        
        # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏–∑–≤–µ—Å—Ç–Ω—ã–µ —Ñ–ª–∞–≥–∏
        assert manager.get_language_flag('en') == 'üá∫üá∏'
        assert manager.get_language_flag('ru') == 'üá∑üá∫'
        assert manager.get_language_flag('unknown') == 'üåê'