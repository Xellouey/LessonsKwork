"""
–û—Å–Ω–æ–≤–Ω—ã–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è Telegram –±–æ—Ç–∞.
InlineKeyboard –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏, –º–µ–Ω—é, –ø–æ–∫—É–ø–æ–∫ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.
"""

import logging
from typing import List, Optional, Dict, Any
from telegram import InlineKeyboardButton, InlineKeyboardMarkup

from bot.utils.i18n import get_text


logger = logging.getLogger(__name__)


class KeyboardBuilder:
    """–°—Ç—Ä–æ–∏—Ç–µ–ª—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏."""
    
    @staticmethod
    def main_menu(lang: str = "en") -> InlineKeyboardMarkup:
        """
        –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –±–æ—Ç–∞.
        
        Args:
            lang: –ö–æ–¥ —è–∑—ã–∫–∞
            
        Returns:
            InlineKeyboardMarkup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
        """
        keyboard = [
            [
                InlineKeyboardButton(
                    get_text("main_menu.browse_lessons", lang),
                    callback_data="menu:browse_lessons"
                )
            ],
            [
                InlineKeyboardButton(
                    get_text("main_menu.my_lessons", lang),
                    callback_data="menu:my_lessons"
                )
            ],
            [
                InlineKeyboardButton(
                    get_text("main_menu.support", lang),
                    callback_data="menu:support"
                ),
                InlineKeyboardButton(
                    get_text("main_menu.language", lang),
                    callback_data="menu:language"
                )
            ]
        ]
        
        return InlineKeyboardMarkup(keyboard)
    
    @staticmethod
    def lessons_catalog(
        lessons: List[Dict[str, Any]], 
        page: int = 1, 
        total_pages: int = 1,
        lang: str = "en"
    ) -> InlineKeyboardMarkup:
        """
        –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∫–∞—Ç–∞–ª–æ–≥–∞ —É—Ä–æ–∫–æ–≤ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π.
        
        Args:
            lessons: –°–ø–∏—Å–æ–∫ —É—Ä–æ–∫–æ–≤
            page: –¢–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
            total_pages: –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü
            lang: –ö–æ–¥ —è–∑—ã–∫–∞
            
        Returns:
            InlineKeyboardMarkup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∫–∞—Ç–∞–ª–æ–≥–∞
        """
        keyboard = []
        
        # –ö–Ω–æ–ø–∫–∏ —É—Ä–æ–∫–æ–≤ (–ø–æ 2 –≤ —Ä—è–¥)
        for i in range(0, len(lessons), 2):
            row = []
            
            # –ü–µ—Ä–≤—ã–π —É—Ä–æ–∫ –≤ —Ä—è–¥—É
            lesson = lessons[i]
            price_text = get_text("common.free", lang) if lesson.get('is_free') else f"{lesson.get('price', 0)} ‚≠ê"
            button_text = f"üìñ {lesson.get('title', '')[:20]}{'...' if len(lesson.get('title', '')) > 20 else ''}\nüí∞ {price_text}"
            
            row.append(InlineKeyboardButton(
                button_text,
                callback_data=f"lesson:view:{lesson.get('id')}"
            ))
            
            # –í—Ç–æ—Ä–æ–π —É—Ä–æ–∫ –≤ —Ä—è–¥—É (–µ—Å–ª–∏ –µ—Å—Ç—å)
            if i + 1 < len(lessons):
                lesson2 = lessons[i + 1]
                price_text2 = get_text("common.free", lang) if lesson2.get('is_free') else f"{lesson2.get('price', 0)} ‚≠ê"
                button_text2 = f"üìñ {lesson2.get('title', '')[:20]}{'...' if len(lesson2.get('title', '')) > 20 else ''}\nüí∞ {price_text2}"
                
                row.append(InlineKeyboardButton(
                    button_text2,
                    callback_data=f"lesson:view:{lesson2.get('id')}"
                ))
            
            keyboard.append(row)
        
        # –ü–∞–≥–∏–Ω–∞—Ü–∏—è
        if total_pages > 1:
            pagination_row = []
            
            if page > 1:
                pagination_row.append(InlineKeyboardButton(
                    get_text("lessons.prev_page", lang),
                    callback_data=f"catalog:page:{page - 1}"
                ))
            
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
            pagination_row.append(InlineKeyboardButton(
                get_text("lessons.page_info", lang, current=page, total=total_pages),
                callback_data="page_info"
            ))
            
            if page < total_pages:
                pagination_row.append(InlineKeyboardButton(
                    get_text("lessons.next_page", lang),
                    callback_data=f"catalog:page:{page + 1}"
                ))
            
            keyboard.append(pagination_row)
        
        # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
        keyboard.append([
            InlineKeyboardButton(
                get_text("navigation.main_menu", lang),
                callback_data="menu:main"
            )
        ])
        
        return InlineKeyboardMarkup(keyboard)
    
    @staticmethod
    def lesson_detail(
        lesson: Dict[str, Any], 
        user_purchased: bool = False, 
        lang: str = "en"
    ) -> InlineKeyboardMarkup:
        """
        –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —É—Ä–æ–∫–∞.
        
        Args:
            lesson: –î–∞–Ω–Ω—ã–µ —É—Ä–æ–∫–∞
            user_purchased: –ö—É–ø–∏–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Ä–æ–∫
            lang: –ö–æ–¥ —è–∑—ã–∫–∞
            
        Returns:
            InlineKeyboardMarkup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–µ—Ç–∞–ª–∏ —É—Ä–æ–∫–∞
        """
        keyboard = []
        
        if user_purchased:
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∫—É–ø–∏–ª —É—Ä–æ–∫
            keyboard.append([
                InlineKeyboardButton(
                    get_text("lessons.view_lesson", lang),
                    callback_data=f"lesson:open:{lesson.get('id')}"
                )
            ])
        else:
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â–µ –Ω–µ –∫—É–ø–∏–ª —É—Ä–æ–∫
            if lesson.get('is_free'):
                # –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π —É—Ä–æ–∫
                keyboard.append([
                    InlineKeyboardButton(
                        get_text("lessons.view_lesson", lang),
                        callback_data=f"lesson:open:{lesson.get('id')}"
                    )
                ])
            else:
                # –ü–ª–∞—Ç–Ω—ã–π —É—Ä–æ–∫
                price_text = get_text("lessons.buy_button", lang, price=f"{lesson.get('price', 0)} ‚≠ê")
                keyboard.append([
                    InlineKeyboardButton(
                        price_text,
                        callback_data=f"payment:start:{lesson.get('id')}"
                    )
                ])
        
        # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        keyboard.append([
            InlineKeyboardButton(
                get_text("navigation.back", lang),
                callback_data="menu:browse_lessons"
            ),
            InlineKeyboardButton(
                get_text("navigation.main_menu", lang),
                callback_data="menu:main"
            )
        ])
        
        return InlineKeyboardMarkup(keyboard)
    
    @staticmethod
    def my_lessons(
        lessons: List[Dict[str, Any]], 
        page: int = 1, 
        total_pages: int = 1,
        lang: str = "en"
    ) -> InlineKeyboardMarkup:
        """
        –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ "–ú–æ–∏ —É—Ä–æ–∫–∏".
        
        Args:
            lessons: –ö—É–ø–ª–µ–Ω–Ω—ã–µ —É—Ä–æ–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            page: –¢–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
            total_pages: –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü
            lang: –ö–æ–¥ —è–∑—ã–∫–∞
            
        Returns:
            InlineKeyboardMarkup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ "–ú–æ–∏ —É—Ä–æ–∫–∏"
        """
        keyboard = []
        
        # –ö–Ω–æ–ø–∫–∏ —É—Ä–æ–∫–æ–≤
        for lesson in lessons:
            keyboard.append([
                InlineKeyboardButton(
                    f"üìñ {lesson.get('title', '')}",
                    callback_data=f"lesson:open:{lesson.get('id')}"
                )
            ])
        
        # –ü–∞–≥–∏–Ω–∞—Ü–∏—è (–µ—Å–ª–∏ –Ω—É–∂–Ω–∞)
        if total_pages > 1:
            pagination_row = []
            
            if page > 1:
                pagination_row.append(InlineKeyboardButton(
                    get_text("lessons.prev_page", lang),
                    callback_data=f"my_lessons:page:{page - 1}"
                ))
            
            pagination_row.append(InlineKeyboardButton(
                get_text("lessons.page_info", lang, current=page, total=total_pages),
                callback_data="page_info"
            ))
            
            if page < total_pages:
                pagination_row.append(InlineKeyboardButton(
                    get_text("lessons.next_page", lang),
                    callback_data=f"my_lessons:page:{page + 1}"
                ))
            
            keyboard.append(pagination_row)
        
        # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        keyboard.append([
            InlineKeyboardButton(
                get_text("main_menu.browse_lessons", lang),
                callback_data="menu:browse_lessons"
            )
        ])
        
        keyboard.append([
            InlineKeyboardButton(
                get_text("navigation.main_menu", lang),
                callback_data="menu:main"
            )
        ])
        
        return InlineKeyboardMarkup(keyboard)
    
    @staticmethod
    def language_selection(supported_languages: List[Dict[str, str]], current_lang: str = "en") -> InlineKeyboardMarkup:
        """
        –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞.
        
        Args:
            supported_languages: –°–ø–∏—Å–æ–∫ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —è–∑—ã–∫–æ–≤
            current_lang: –¢–µ–∫—É—â–∏–π —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            InlineKeyboardMarkup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
        """
        keyboard = []
        
        for lang_info in supported_languages:
            lang_code = lang_info.get('code')
            lang_name = lang_info.get('name')
            
            # –û—Ç–º–µ—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —è–∑—ã–∫
            if lang_code == current_lang:
                lang_name = f"‚úÖ {lang_name}"
            
            keyboard.append([
                InlineKeyboardButton(
                    lang_name,
                    callback_data=f"language:set:{lang_code}"
                )
            ])
        
        # –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
        keyboard.append([
            InlineKeyboardButton(
                get_text("navigation.back", current_lang),
                callback_data="menu:main"
            )
        ])
        
        return InlineKeyboardMarkup(keyboard)
    
    @staticmethod
    def payment_confirmation(
        lesson: Dict[str, Any], 
        final_price: int, 
        promo_info: Optional[Dict[str, Any]] = None,
        lang: str = "en"
    ) -> InlineKeyboardMarkup:
        """
        –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞.
        
        Args:
            lesson: –î–∞–Ω–Ω—ã–µ —É—Ä–æ–∫–∞
            final_price: –§–∏–Ω–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞
            promo_info: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–º–æ–∫–æ–¥–µ
            lang: –ö–æ–¥ —è–∑—ã–∫–∞
            
        Returns:
            InlineKeyboardMarkup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        """
        keyboard = [
            [
                InlineKeyboardButton(
                    get_text("payments.confirm_button", lang),
                    callback_data=f"payment:confirm:{lesson.get('id')}:{final_price}"
                )
            ],
            [
                InlineKeyboardButton(
                    get_text("payments.cancel_button", lang),
                    callback_data=f"lesson:view:{lesson.get('id')}"
                )
            ]
        ]
        
        return InlineKeyboardMarkup(keyboard)
    
    @staticmethod
    def promo_code_input(lesson_id: int, lang: str = "en") -> InlineKeyboardMarkup:
        """
        –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤–≤–æ–¥–∞ –ø—Ä–æ–º–æ–∫–æ–¥–∞.
        
        Args:
            lesson_id: ID —É—Ä–æ–∫–∞
            lang: –ö–æ–¥ —è–∑—ã–∫–∞
            
        Returns:
            InlineKeyboardMarkup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤–≤–æ–¥–∞ –ø—Ä–æ–º–æ–∫–æ–¥–∞
        """
        keyboard = [
            [
                InlineKeyboardButton(
                    get_text("payments.skip_promo", lang),
                    callback_data=f"payment:skip_promo:{lesson_id}"
                )
            ],
            [
                InlineKeyboardButton(
                    get_text("navigation.cancel", lang),
                    callback_data=f"lesson:view:{lesson_id}"
                )
            ]
        ]
        
        return InlineKeyboardMarkup(keyboard)
    
    @staticmethod
    def support_menu(lang: str = "en") -> InlineKeyboardMarkup:
        """
        –ú–µ–Ω—é –ø–æ–¥–¥–µ—Ä–∂–∫–∏.
        
        Args:
            lang: –ö–æ–¥ —è–∑—ã–∫–∞
            
        Returns:
            InlineKeyboardMarkup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏
        """
        keyboard = [
            [
                InlineKeyboardButton(
                    get_text("support.send_message", lang),
                    callback_data="support:send_message"
                )
            ],
            [
                InlineKeyboardButton(
                    get_text("support.faq", lang),
                    callback_data="support:faq"
                )
            ],
            [
                InlineKeyboardButton(
                    get_text("navigation.main_menu", lang),
                    callback_data="menu:main"
                )
            ]
        ]
        
        return InlineKeyboardMarkup(keyboard)
    
    @staticmethod
    def back_to_main(lang: str = "en") -> InlineKeyboardMarkup:
        """
        –ü—Ä–æ—Å—Ç–∞—è –∫–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é".
        
        Args:
            lang: –ö–æ–¥ —è–∑—ã–∫–∞
            
        Returns:
            InlineKeyboardMarkup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π –Ω–∞–∑–∞–¥
        """
        keyboard = [
            [
                InlineKeyboardButton(
                    get_text("navigation.main_menu", lang),
                    callback_data="menu:main"
                )
            ]
        ]
        
        return InlineKeyboardMarkup(keyboard)
    
    @staticmethod
    def admin_panel(lang: str = "en") -> InlineKeyboardMarkup:
        """
        –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (–µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω).
        
        Args:
            lang: –ö–æ–¥ —è–∑—ã–∫–∞
            
        Returns:
            InlineKeyboardMarkup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
        """
        keyboard = [
            [
                InlineKeyboardButton(
                    get_text("admin.stats", lang),
                    callback_data="admin:stats"
                ),
                InlineKeyboardButton(
                    get_text("admin.users", lang),
                    callback_data="admin:users"
                )
            ],
            [
                InlineKeyboardButton(
                    get_text("admin.lessons", lang),
                    callback_data="admin:lessons"
                ),
                InlineKeyboardButton(
                    get_text("admin.broadcast", lang),
                    callback_data="admin:broadcast"
                )
            ],
            [
                InlineKeyboardButton(
                    get_text("navigation.main_menu", lang),
                    callback_data="menu:main"
                )
            ]
        ]
        
        return InlineKeyboardMarkup(keyboard)
    
    @staticmethod
    def inline_query_result(lesson: Dict[str, Any], lang: str = "en") -> str:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å callback_data –¥–ª—è inline –∑–∞–ø—Ä–æ—Å–æ–≤.
        
        Args:
            lesson: –î–∞–Ω–Ω—ã–µ —É—Ä–æ–∫–∞
            lang: –ö–æ–¥ —è–∑—ã–∫–∞
            
        Returns:
            str: Callback data –¥–ª—è —É—Ä–æ–∫–∞
        """
        return f"lesson:view:{lesson.get('id')}"


# –£–¥–æ–±–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä
def main_menu_keyboard(lang: str = "en") -> InlineKeyboardMarkup:
    """–ë—ã—Å—Ç—Ä–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é."""
    return KeyboardBuilder.main_menu(lang)


def back_button(lang: str = "en") -> InlineKeyboardMarkup:
    """–ë—ã—Å—Ç—Ä–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –Ω–∞–∑–∞–¥."""
    return KeyboardBuilder.back_to_main(lang)