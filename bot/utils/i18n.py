"""
–°–∏—Å—Ç–µ–º–∞ –∏–Ω—Ç–µ—Ä–Ω–∞—Ü–∏–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–ª—è Telegram –±–æ—Ç–∞.
–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥–∞–º–∏, —è–∑—ã–∫–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤.
"""

import json
import logging
from pathlib import Path
from typing import Dict, Optional, Any, List

from bot.utils.api_client import BackendAPI


logger = logging.getLogger(__name__)


class TranslationManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –∏ –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏."""
    
    def __init__(self, locales_path: str = "bot/locales"):
        self.locales_path = Path(locales_path)
        self.translations: Dict[str, Dict[str, Any]] = {}
        self.supported_languages: List[str] = []
        self.default_language = "en"
        self.user_languages: Dict[int, str] = {}  # –ö–µ—à —è–∑—ã–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        
        self._load_translations()
    
    def _load_translations(self):
        """–ó–∞–≥—Ä—É–∑–∏—Ç—å –≤—Å–µ –ø–µ—Ä–µ–≤–æ–¥—ã –∏–∑ —Ñ–∞–π–ª–æ–≤."""
        try:
            if not self.locales_path.exists():
                logger.warning(f"Locales directory not found: {self.locales_path}")
                return
            
            for lang_dir in self.locales_path.iterdir():
                if lang_dir.is_dir() and lang_dir.name.isalpha():
                    lang_code = lang_dir.name
                    messages_file = lang_dir / "messages.json"
                    
                    if messages_file.exists():
                        try:
                            with open(messages_file, 'r', encoding='utf-8') as f:
                                translations = json.load(f)
                            
                            self.translations[lang_code] = translations
                            self.supported_languages.append(lang_code)
                            
                            logger.info(f"‚úÖ Loaded translations for language: {lang_code}")
                        except Exception as e:
                            logger.error(f"‚ùå Error loading translations for {lang_code}: {e}")
            
            if self.supported_languages:
                logger.info(f"‚úÖ Loaded translations for languages: {', '.join(self.supported_languages)}")
            else:
                logger.warning("‚ö†Ô∏è No translations loaded!")
                
        except Exception as e:
            logger.error(f"‚ùå Error loading translations: {e}")
    
    def get_text(self, key: str, lang: str = None, **kwargs) -> str:
        """
        –ü–æ–ª—É—á–∏—Ç—å –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç.
        
        Args:
            key: –ö–ª—é—á –ø–µ—Ä–µ–≤–æ–¥–∞ (–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ç–æ—á–µ—á–Ω—É—é –Ω–æ—Ç–∞—Ü–∏—é, –Ω–∞–ø—Ä–∏–º–µ—Ä 'menu.browse_lessons')
            lang: –ö–æ–¥ —è–∑—ã–∫–∞
            **kwargs: –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç—Ä–æ–∫–∏
            
        Returns:
            str: –ü–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
        """
        if not lang:
            lang = self.default_language
        
        # Fallback –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π, –µ—Å–ª–∏ —è–∑—ã–∫ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è
        if lang not in self.translations:
            lang = self.default_language
        
        # Fallback –Ω–∞ –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π —è–∑—ã–∫
        if lang not in self.translations and self.translations:
            lang = next(iter(self.translations.keys()))
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥–∞
        translation = self._get_nested_value(self.translations.get(lang, {}), key)
        
        # Fallback –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π –µ—Å–ª–∏ –ø–µ—Ä–µ–≤–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω
        if not translation and lang != self.default_language:
            translation = self._get_nested_value(self.translations.get(self.default_language, {}), key)
        
        # –ï—Å–ª–∏ –ø–µ—Ä–µ–≤–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–ª—é—á
        if not translation:
            logger.warning(f"Translation not found: {key} for language {lang}")
            return key
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏
        try:
            if kwargs:
                return translation.format(**kwargs)
            return translation
        except Exception as e:
            logger.error(f"Error formatting translation {key}: {e}")
            return translation
    
    def _get_nested_value(self, data: dict, key: str) -> Optional[str]:
        """
        –ü–æ–ª—É—á–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ –≤–ª–æ–∂–µ–Ω–Ω–æ–º—É –∫–ª—é—á—É.
        
        Args:
            data: –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏
            key: –ö–ª—é—á (–º–æ–∂–µ—Ç –±—ã—Ç—å –≤–ª–æ–∂–µ–Ω–Ω—ã–º —Å —Ç–æ—á–∫–∞–º–∏)
            
        Returns:
            Optional[str]: –ó–Ω–∞—á–µ–Ω–∏–µ –∏–ª–∏ None
        """
        keys = key.split('.')
        current = data
        
        for k in keys:
            if isinstance(current, dict) and k in current:
                current = current[k]
            else:
                return None
        
        return current if isinstance(current, str) else None
    
    async def get_user_language(self, user_id: int) -> str:
        """
        –ü–æ–ª—É—á–∏—Ç—å —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram
            
        Returns:
            str: –ö–æ–¥ —è–∑—ã–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–µ—à
        if user_id in self.user_languages:
            return self.user_languages[user_id]
        
        # –ü–æ–ª—É—á–∏—Ç—å –∏–∑ API
        try:
            api_client = BackendAPI.get_client()
            user_data = await api_client.get_user(user_id)
            lang = user_data.get('language_code', self.default_language)
            
            # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∫—É —è–∑—ã–∫–∞
            if lang not in self.supported_languages:
                lang = self.default_language
            
            # –ö–µ—à–∏—Ä–æ–≤–∞—Ç—å
            self.user_languages[user_id] = lang
            return lang
            
        except Exception as e:
            logger.error(f"Error getting user language for {user_id}: {e}")
            return self.default_language
    
    async def set_user_language(self, user_id: int, language: str) -> bool:
        """
        –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram
            language: –ö–æ–¥ —è–∑—ã–∫–∞
            
        Returns:
            bool: True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
        """
        if language not in self.supported_languages:
            logger.warning(f"Unsupported language: {language}")
            return False
        
        try:
            # –û–±–Ω–æ–≤–∏—Ç—å –≤ API
            api_client = BackendAPI.get_client()
            await api_client.update_user(user_id, language_code=language)
            
            # –û–±–Ω–æ–≤–∏—Ç—å –∫–µ—à
            self.user_languages[user_id] = language
            
            logger.info(f"Set language for user {user_id}: {language}")
            return True
            
        except Exception as e:
            logger.error(f"Error setting user language for {user_id}: {e}")
            return False
    
    async def get_user_text(self, user_id: int, key: str, **kwargs) -> str:
        """
        –ü–æ–ª—É—á–∏—Ç—å –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram
            key: –ö–ª—é—á –ø–µ—Ä–µ–≤–æ–¥–∞
            **kwargs: –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            
        Returns:
            str: –ü–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
        """
        user_lang = await self.get_user_language(user_id)
        return self.get_text(key, user_lang, **kwargs)
    
    def get_supported_languages(self) -> List[Dict[str, str]]:
        """
        –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —è–∑—ã–∫–æ–≤.
        
        Returns:
            List[Dict[str, str]]: –°–ø–∏—Å–æ–∫ —è–∑—ã–∫–æ–≤ —Å –∫–æ–¥–∞–º–∏ –∏ –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏
        """
        language_names = {
            'en': 'üá∫üá∏ English',
            'ru': 'üá∑üá∫ –†—É—Å—Å–∫–∏–π',
            'uk': 'üá∫üá¶ –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞',
            'es': 'üá™üá∏ Espa√±ol',
            'fr': 'üá´üá∑ Fran√ßais',
            'de': 'üá©üá™ Deutsch',
            'it': 'üáÆüáπ Italiano',
            'pt': 'üáßüá∑ Portugu√™s',
        }
        
        return [
            {
                'code': lang,
                'name': language_names.get(lang, lang.upper())
            }
            for lang in self.supported_languages
        ]
    
    def format_price(self, amount: int, lang: str = None) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Ü–µ–Ω—É —Å —Å–∏–º–≤–æ–ª–æ–º Stars.
        
        Args:
            amount: –°—É–º–º–∞ –≤ Stars
            lang: –ö–æ–¥ —è–∑—ã–∫–∞
            
        Returns:
            str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ü–µ–Ω–∞
        """
        if not lang:
            lang = self.default_language
        
        # –õ–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á–∏—Å–µ–ª
        if lang == 'ru':
            if amount == 1:
                return f"{amount} ‚≠ê –∑–≤–µ–∑–¥–∞"
            elif 2 <= amount <= 4:
                return f"{amount} ‚≠ê –∑–≤–µ–∑–¥—ã"
            else:
                return f"{amount} ‚≠ê –∑–≤–µ–∑–¥"
        else:
            # –ê–Ω–≥–ª–∏–π—Å–∫–∏–π –∏ –¥—Ä—É–≥–∏–µ —è–∑—ã–∫–∏
            if amount == 1:
                return f"{amount} ‚≠ê star"
            else:
                return f"{amount} ‚≠ê stars"
    
    def format_duration(self, seconds: int, lang: str = None) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å.
        
        Args:
            seconds: –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
            lang: –ö–æ–¥ —è–∑—ã–∫–∞
            
        Returns:
            str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
        """
        if not lang:
            lang = self.default_language
        
        minutes = seconds // 60
        hours = minutes // 60
        
        if hours > 0:
            if lang == 'ru':
                return f"{hours} —á {minutes % 60} –º–∏–Ω"
            else:
                return f"{hours}h {minutes % 60}m"
        else:
            if lang == 'ru':
                return f"{minutes} –º–∏–Ω"
            else:
                return f"{minutes}m"
    
    def get_language_flag(self, lang_code: str) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å —Ñ–ª–∞–≥ –¥–ª—è —è–∑—ã–∫–∞."""
        flags = {
            'en': 'üá∫üá∏',
            'ru': 'üá∑üá∫', 
            'uk': 'üá∫üá¶',
            'es': 'üá™üá∏',
            'fr': 'üá´üá∑',
            'de': 'üá©üá™',
            'it': 'üáÆüáπ',
            'pt': 'üáßüá∑',
        }
        return flags.get(lang_code, 'üåê')
    
    def clear_user_cache(self, user_id: Optional[int] = None):
        """
        –û—á–∏—Å—Ç–∏—Ç—å –∫–µ—à —è–∑—ã–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
        
        Args:
            user_id: ID –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ None –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –≤—Å–µ–≥–æ –∫–µ—à–∞
        """
        if user_id:
            self.user_languages.pop(user_id, None)
        else:
            self.user_languages.clear()
    
    def reload_translations(self):
        """–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥—ã –∏–∑ —Ñ–∞–π–ª–æ–≤."""
        self.translations.clear()
        self.supported_languages.clear()
        self._load_translations()


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ø–µ—Ä–µ–≤–æ–¥–æ–≤
i18n = TranslationManager()


# –£–¥–æ–±–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏-—Å–æ–∫—Ä–∞—â–µ–Ω–∏—è
async def get_user_text(user_id: int, key: str, **kwargs) -> str:
    """–ë—ã—Å—Ç—Ä—ã–π –¥–æ—Å—Ç—É–ø –∫ –ø–µ—Ä–µ–≤–æ–¥—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    return await i18n.get_user_text(user_id, key, **kwargs)


def get_text(key: str, lang: str = 'en', **kwargs) -> str:
    """–ë—ã—Å—Ç—Ä—ã–π –¥–æ—Å—Ç—É–ø –∫ –ø–µ—Ä–µ–≤–æ–¥—É."""
    return i18n.get_text(key, lang, **kwargs)


async def set_user_language(user_id: int, language: str) -> bool:
    """–ë—ã—Å—Ç—Ä–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ —è–∑—ã–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    return await i18n.set_user_language(user_id, language)


async def get_user_language(user_id: int) -> str:
    """–ë—ã—Å—Ç—Ä–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ —è–∑—ã–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    return await i18n.get_user_language(user_id)