"""
–ì–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª Telegram –±–æ—Ç–∞.
–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è, –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤, –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞.
"""

import asyncio
import logging
import logging.config
import sys
from contextlib import asynccontextmanager
from typing import Optional
from telegram import Update
from telegram.ext import (
    Application, 
    CommandHandler, 
    CallbackQueryHandler, 
    MessageHandler, 
    PreCheckoutQueryHandler,
    ConversationHandler,
    filters
)

from bot.config import settings, validate_bot_configuration, get_log_config
from bot.utils.state_manager import StateManager
from bot.shared.database import init_database, check_database_connection
from bot.utils.i18n import i18n
from bot.handlers.main_handlers import create_main_handlers
from bot.handlers.lesson_handlers import create_lesson_handlers
from bot.handlers.payment_handlers import create_payment_handlers
from bot.handlers.support_handlers import create_support_handlers
from bot.handlers.admin_handlers import (
    create_admin_handlers, 
    ADMIN_MENU, LESSON_MANAGEMENT, ADD_LESSON, EDIT_LESSON,
    USER_STATS, BROADCAST, SETTINGS, WAITING_LESSON_TITLE,
    WAITING_LESSON_DESCRIPTION, WAITING_LESSON_PRICE, WAITING_LESSON_CONTENT,
    WAITING_BROADCAST_MESSAGE, WAITING_SETTING_VALUE
)
from bot.handlers.lesson_admin_handlers import create_lesson_admin_handlers
from bot.handlers.broadcast_settings_handlers import create_broadcast_settings_handlers


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.config.dictConfig(get_log_config())
logger = logging.getLogger(__name__)


class LessonsBot:
    """–ì–ª–∞–≤–Ω—ã–π –∫–ª–∞—Å—Å Telegram –±–æ—Ç–∞."""
    
    def __init__(self):
        self.app: Optional[Application] = None
        self.state_manager: Optional[StateManager] = None
        self.handlers = {}
    
    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞."""
        logger.info("üöÄ Initializing Lessons Bot...")
        
        try:
            # –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            if not validate_bot_configuration():
                raise ValueError("Bot configuration validation failed")
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            if not check_database_connection():
                logger.info("üìä Initializing database...")
                init_database()
                logger.info("‚úÖ Database initialized successfully")
            else:
                logger.info("‚úÖ Database connection is healthy")
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π
            self.state_manager = StateManager(
                use_redis=settings.use_redis,
                redis_url=settings.redis_url
            )
            
            # –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–æ–≤
            i18n.reload_translations()
            logger.info(f"‚úÖ Loaded translations for: {', '.join(i18n.supported_languages)}")
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –±–æ—Ç–∞
            self.app = Application.builder().token(settings.telegram_bot_token).build()
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
            self.handlers = {
                'main': create_main_handlers(self.state_manager),
                'lessons': create_lesson_handlers(self.state_manager),
                'payments': create_payment_handlers(self.state_manager),
                'support': create_support_handlers(self.state_manager),
                'admin': create_admin_handlers(self.state_manager),
                'lesson_admin': create_lesson_admin_handlers(self.state_manager),
                'broadcast_settings': create_broadcast_settings_handlers(self.state_manager)
            }
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
            self._setup_handlers()
            
            logger.info("‚úÖ Bot initialized successfully")
            
        except Exception as e:
            logger.error(f"‚ùå Bot initialization failed: {e}")
            raise
    
    def _setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –±–æ—Ç–∞."""
        logger.info("üìã Setting up bot handlers...")
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
        self.app.add_handler(
            CommandHandler("start", self.handlers['main'].start_command)
        )
        self.app.add_handler(
            CommandHandler("help", self.handlers['main'].help_command)
        )
        
        # –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å ConversationHandler
        admin_conversation = ConversationHandler(
            entry_points=[
                CommandHandler('admin', self.handlers['admin'].admin_command)
            ],
            states={
                ADMIN_MENU: [
                    CallbackQueryHandler(
                        self.handlers['admin'].admin_menu_callback,
                        pattern=r"^admin:"
                    )
                ],
                LESSON_MANAGEMENT: [
                    CallbackQueryHandler(
                        self.handlers['admin'].lesson_callback,
                        pattern=r"^lesson:"
                    ),
                    CallbackQueryHandler(
                        self.handlers['admin'].admin_menu_callback,
                        pattern=r"^admin:"
                    )
                ],
                ADD_LESSON: [
                    CallbackQueryHandler(
                        self.handlers['admin'].lesson_callback,
                        pattern=r"^lesson:"
                    )
                ],
                EDIT_LESSON: [
                    CallbackQueryHandler(
                        self.handlers['admin'].edit_lesson_callback,
                        pattern=r"^lesson:"
                    ),
                    CallbackQueryHandler(
                        self.handlers['admin'].delete_lesson_callback,
                        pattern=r"^lesson:"
                    ),
                    CallbackQueryHandler(
                        self.handlers['admin'].admin_menu_callback,
                        pattern=r"^admin:"
                    )
                ],
                USER_STATS: [
                    CallbackQueryHandler(
                        self.handlers['admin'].admin_menu_callback,
                        pattern=r"^admin:"
                    )
                ],
                BROADCAST: [
                    CallbackQueryHandler(
                        self.handlers['admin'].broadcast_callback,
                        pattern=r"^admin:broadcast"
                    ),
                    CallbackQueryHandler(
                        self.handlers['admin'].send_broadcast_message,
                        pattern=r"^broadcast:send_confirmed"
                    ),
                    CallbackQueryHandler(
                        self.handlers['admin'].admin_menu_callback,
                        pattern=r"^admin:"
                    )
                ],
                SETTINGS: [
                    CallbackQueryHandler(
                        self.handlers['admin'].settings_callback,
                        pattern=r"^settings:"
                    ),
                    CallbackQueryHandler(
                        self.handlers['admin'].admin_menu_callback,
                        pattern=r"^admin:"
                    )
                ],
                WAITING_LESSON_TITLE: [
                    MessageHandler(
                        filters.TEXT & ~filters.COMMAND,
                        self.handlers['admin'].waiting_lesson_title
                    )
                ],
                WAITING_LESSON_DESCRIPTION: [
                    MessageHandler(
                        filters.TEXT & ~filters.COMMAND,
                        self.handlers['admin'].waiting_lesson_description
                    )
                ],
                WAITING_LESSON_PRICE: [
                    MessageHandler(
                        filters.TEXT & ~filters.COMMAND,
                        self.handlers['admin'].waiting_lesson_price
                    )
                ],
                WAITING_LESSON_CONTENT: [
                    MessageHandler(
                        filters.TEXT | filters.VIDEO,
                        self.handlers['admin'].waiting_lesson_content
                    )
                ],
                WAITING_BROADCAST_MESSAGE: [
                    MessageHandler(
                        filters.TEXT & ~filters.COMMAND,
                        self.handlers['admin'].waiting_broadcast_message
                    )
                ],
                WAITING_SETTING_VALUE: [
                    MessageHandler(
                        filters.TEXT & ~filters.COMMAND,
                        self.handlers['admin'].waiting_setting_value
                    )
                ]
            },
            fallbacks=[
                CommandHandler('cancel', self.handlers['admin'].cancel),
                CallbackQueryHandler(
                    self.handlers['admin'].cancel,
                    pattern=r"^cancel"
                )
            ],
            allow_reentry=True
        )
        
        self.app.add_handler(admin_conversation)
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
        self.app.add_handler(
            CallbackQueryHandler(
                self.handlers['main'].main_menu_callback,
                pattern=r"^menu:"
            )
        )
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–∞—Ç–∞–ª–æ–≥–∞ —É—Ä–æ–∫–æ–≤
        self.app.add_handler(
            CallbackQueryHandler(
                self.handlers['main'].catalog_pagination_callback,
                pattern=r"^catalog:page:\d+$"
            )
        )
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —É—Ä–æ–∫–æ–≤
        self.app.add_handler(
            CallbackQueryHandler(
                self.handlers['lessons'].lesson_detail_callback,
                pattern=r"^lesson:view:\d+$"
            )
        )
        self.app.add_handler(
            CallbackQueryHandler(
                self.handlers['lessons'].open_lesson_callback,
                pattern=r"^lesson:open:\d+$"
            )
        )
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π
        self.app.add_handler(
            CallbackQueryHandler(
                self.handlers['payments'].start_payment_callback,
                pattern=r"^payment:start:\d+$"
            )
        )
        self.app.add_handler(
            CallbackQueryHandler(
                self.handlers['payments'].skip_promo_callback,
                pattern=r"^payment:skip_promo:\d+$"
            )
        )
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ pre-checkout –∑–∞–ø—Ä–æ—Å–æ–≤
        self.app.add_handler(
            PreCheckoutQueryHandler(
                self.handlers['payments'].pre_checkout_query_handler
            )
        )
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É—Å–ø–µ—à–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π
        self.app.add_handler(
            MessageHandler(
                filters.SUCCESSFUL_PAYMENT,
                self.handlers['payments'].successful_payment_handler
            )
        )
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏
        self.app.add_handler(
            CallbackQueryHandler(
                self.handlers['support'].support_menu_callback,
                pattern=r"^support:menu$"
            )
        )
        self.app.add_handler(
            CallbackQueryHandler(
                self.handlers['support'].send_message_callback,
                pattern=r"^support:send_message$"
            )
        )
        self.app.add_handler(
            CallbackQueryHandler(
                self.handlers['support'].faq_callback,
                pattern=r"^support:faq$"
            )
        )
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —è–∑—ã–∫–æ–≤
        self.app.add_handler(
            CallbackQueryHandler(
                self.handlers['main'].language_callback,
                pattern=r"^language:set:"
            )
        )
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
        self.app.add_handler(
            MessageHandler(
                filters.TEXT & ~filters.COMMAND,
                self._message_router
            )
        )
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–ª–ª–±—ç–∫–æ–≤
        self.app.add_handler(
            CallbackQueryHandler(
                self.handlers['main'].unknown_callback
            )
        )
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
        self.app.add_error_handler(
            self.handlers['main'].error_handler
        )
        
        logger.info("‚úÖ Bot handlers configured")
    
    async def _message_router(self, update: Update, context):
        """
        –ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        """
        user_id = update.effective_user.id
        current_state, _ = self.state_manager.get_user_state(user_id)
        
        from bot.states.user_states import BotState
        
        if current_state == BotState.PROMO_CODE_INPUT:
            # –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–≤–æ–¥ –ø—Ä–æ–º–æ–∫–æ–¥–∞
            await self.handlers['payments'].promo_code_message_handler(update, context)
        elif current_state == BotState.SUPPORT_MESSAGE_INPUT:
            # –û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É
            await self.handlers['support'].support_message_handler(update, context)
        elif settings.is_admin(user_id):
            # –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ—Ç–≤–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            await self.handlers['support'].admin_reply_handler(update, context)
        else:
            # –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ - –ø–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            await self.handlers['main'].start_command(update, context)
    
    async def start(self):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞."""
        logger.info("ü§ñ Starting Lessons Bot...")
        
        try:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
            await self.initialize()
            
            # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
            logger.info(f"üåü Bot is running as @{settings.bot_username or 'unknown'}")
            logger.info(f"üîß Debug mode: {settings.debug}")
            logger.info(f"üåê Supported languages: {', '.join(i18n.supported_languages)}")
            
            await self.app.run_polling(
                drop_pending_updates=True,
                allowed_updates=['message', 'callback_query', 'pre_checkout_query']
            )
            
        except Exception as e:
            logger.error(f"‚ùå Bot startup failed: {e}")
            raise
        finally:
            await self.cleanup()
    
    async def cleanup(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤."""
        logger.info("üßπ Cleaning up bot resources...")
        
        try:
            # –û—á–∏—Å—Ç–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏—è (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
            if self.state_manager:
                self.state_manager.cleanup_expired_states()
            
            logger.info("‚úÖ Cleanup completed")
            
        except Exception as e:
            logger.error(f"‚ùå Error during cleanup: {e}")
    
    async def send_admin_notification(self, message: str):
        """
        –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.
        
        Args:
            message: –¢–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        """
        if settings.admin_chat_id and self.app:
            try:
                await self.app.bot.send_message(
                    chat_id=settings.admin_chat_id,
                    text=f"ü§ñ Bot Notification:\n\n{message}"
                )
            except Exception as e:
                logger.error(f"Error sending admin notification: {e}")


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞."""
    bot = LessonsBot()
    
    try:
        await bot.start()
    except KeyboardInterrupt:
        logger.info("üõë Bot stopped by user")
    except Exception as e:
        logger.error(f"‚ùå Bot crashed: {e}")
        sys.exit(1)


if __name__ == "__main__":
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ."""
    try:
        # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤–µ—Ä—Å–∏—é Python
        if sys.version_info < (3, 8):
            print("‚ùå Python 3.8+ is required")
            sys.exit(1)
        
        # –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞
        asyncio.run(main())
        
    except KeyboardInterrupt:
        print("\nüëã Goodbye!")
    except Exception as e:
        print(f"‚ùå Fatal error: {e}")
        sys.exit(1)