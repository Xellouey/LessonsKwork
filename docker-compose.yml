version: '3.8'

services:
  # Backend API
  api:
    build: .
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=sqlite:///./lessons.db
      - SECRET_KEY=dev-secret-key-change-in-production-xyz789abc123def456
      - TELEGRAM_BOT_TOKEN=${TELEGRAM_BOT_TOKEN:-dev-bot-token}
      - ADMIN_USERNAME=${ADMIN_USERNAME:-admin}
      - ADMIN_PASSWORD=${ADMIN_PASSWORD:-admin123}
      - ENVIRONMENT=development
      - DEBUG=true
    volumes:
      - ./storage:/app/storage
      - ./lessons.db:/app/lessons.db
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Nginx (для продакшна)
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./storage:/var/www/storage:ro
    depends_on:
      - api
    restart: unless-stopped
    profiles:
      - production

  # PostgreSQL (для продакшна)
  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=lessons_bot
      - POSTGRES_USER=lessons_user
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-change_me_in_production}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: unless-stopped
    profiles:
      - production

  # Redis (для кеширования и очередей)
  redis:
    image: redis:7-alpine
    restart: unless-stopped
    profiles:
      - production

volumes:
  postgres_data:

networks:
  default:
    name: lessons_bot_network